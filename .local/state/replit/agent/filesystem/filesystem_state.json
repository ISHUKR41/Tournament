{"file_contents":{"client/src/pages/free-fire-tournament.tsx":{"content":"import { useState } from \"react\";\nimport { Navbar } from \"@/components/navbar\";\nimport { TournamentDetails } from \"@/components/tournament/tournament-details\";\nimport { PrizePool } from \"@/components/tournament/prize-pool\";\nimport { GameRegistrationForm } from \"@/components/tournament/game-registration-form\";\nimport { RegisteredTeams } from \"@/components/tournament/registered-teams\";\nimport { TournamentRules } from \"@/components/tournament/tournament-rules\";\nimport { Footer } from \"@/components/tournament/footer\";\nimport { TOURNAMENT_CONFIG } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Users, Calendar, Flame } from \"lucide-react\";\nimport { SlotCounter } from \"@/components/tournament/slot-counter\";\nimport heroImage from \"@assets/generated_images/Free_Fire_Tournament_Hero_12705473.png\";\nimport { motion } from \"framer-motion\";\n\nexport default function FreeFireTournament() {\n  const [showRegistrationForm, setShowRegistrationForm] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      \n      {/* Free Fire Hero Section */}\n      <div className=\"relative min-h-[700px] lg:min-h-[800px] flex items-center justify-center overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ backgroundImage: `url(${heroImage})` }}\n        >\n          <div className=\"absolute inset-0 hero-gradient\"></div>\n        </div>\n\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-20 left-10 w-72 h-72 bg-chart-1/20 rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-destructive/20 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-chart-2/15 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n        </div>\n\n        <div className=\"relative z-10 container mx-auto px-4 py-24 text-center\">\n          <Badge \n            variant=\"outline\" \n            className=\"mb-8 text-sm px-5 py-2 border-primary/60 bg-primary/15 backdrop-blur-md shadow-lg animate-in fade-in slide-in-from-top-4 duration-700\"\n            data-testid=\"badge-tournament-type\"\n          >\n            <Flame className=\"w-4 h-4 mr-2 text-orange-400\" />\n            Battle Royale Championship 2025\n          </Badge>\n\n          <motion.h1 \n            className=\"text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-display font-bold mb-8 leading-tight\"\n            data-testid=\"text-hero-title\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.7 }}\n            style={{\n              textShadow: '0 0 20px rgba(255, 100, 0, 0.3), 0 0 40px rgba(255, 50, 0, 0.15)',\n            }}\n          >\n            Ultimate Free Fire\n            <span className=\"block gradient-text mt-3 text-6xl sm:text-7xl md:text-8xl lg:text-9xl font-extrabold\" style={{\n              background: 'linear-gradient(135deg, hsl(var(--chart-1)) 0%, hsl(var(--destructive)) 50%, hsl(var(--chart-1)) 100%)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              backgroundSize: '200% 200%',\n              animation: 'gradient-shift 3s ease infinite',\n            }}>Tournament</span>\n          </motion.h1>\n\n          <motion.p \n            className=\"text-lg md:text-xl text-foreground/80 mb-10 max-w-3xl mx-auto font-normal leading-relaxed\"\n            data-testid=\"text-hero-subtitle\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.7, delay: 0.1 }}\n          >\n            Show your power, earn the glory, and become the ultimate Free Fire Champion!\n            Register your squad now for the ultimate battleground experience.\n          </motion.p>\n\n          <motion.div \n            className=\"flex flex-col sm:flex-row items-center justify-center gap-5 mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.7, delay: 0.2 }}\n          >\n            <Button \n              size=\"lg\" \n              className=\"text-lg shadow-lg\"\n              onClick={() => setShowRegistrationForm(true)}\n              data-testid=\"button-register-now\"\n            >\n              <Users className=\"w-5 h-5 mr-2\" />\n              Register Your Squad\n            </Button>\n            \n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"text-lg backdrop-blur-md bg-background/30\"\n              onClick={() => document.getElementById('rules')?.scrollIntoView({ behavior: 'smooth' })}\n              data-testid=\"button-view-rules\"\n            >\n              <Calendar className=\"w-5 h-5 mr-2\" />\n              View Rules\n            </Button>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.7, delay: 0.3 }}\n          >\n            <SlotCounter gameType=\"freefire\" maxTeams={TOURNAMENT_CONFIG.FREE_FIRE.MAX_TEAMS} />\n          </motion.div>\n        </div>\n      </div>\n\n      <TournamentDetails config={TOURNAMENT_CONFIG.FREE_FIRE} />\n      <PrizePool config={TOURNAMENT_CONFIG.FREE_FIRE} />\n      <TournamentRules gameType=\"freefire\" />\n      <RegisteredTeams gameType=\"freefire\" />\n      \n      {showRegistrationForm && (\n        <GameRegistrationForm\n          onClose={() => setShowRegistrationForm(false)}\n          gameType=\"freefire\"\n          gameName=\"Free Fire\"\n          entryFee={TOURNAMENT_CONFIG.FREE_FIRE.ENTRY_FEE}\n        />\n      )}\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5943},"client/src/components/tournament/countdown-timer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Clock } from \"lucide-react\";\nimport { TOURNAMENT_CONFIG } from \"@shared/schema\";\nimport { motion } from \"framer-motion\";\n\nexport function CountdownTimer() {\n  const [timeLeft, setTimeLeft] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      const difference = new Date(TOURNAMENT_CONFIG.PUBG.TOURNAMENT_DATE).getTime() - new Date().getTime();\n      \n      if (difference > 0) {\n        setTimeLeft({\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60),\n        });\n      }\n      setIsLoading(false);\n    };\n\n    calculateTimeLeft();\n    const timer = setInterval(calculateTimeLeft, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Card className=\"p-5 sm:p-6 md:p-7 backdrop-blur-md bg-card/80\" data-testid=\"card-countdown\">\n        <div className=\"flex items-center gap-3 mb-4 sm:mb-5\">\n          <Skeleton className=\"w-10 h-10 rounded-lg\" />\n          <Skeleton className=\"h-6 w-48\" />\n        </div>\n        <div className=\"grid grid-cols-4 gap-2 sm:gap-3 md:gap-4\">\n          {Array.from({ length: 4 }).map((_, index) => (\n            <div key={index} className=\"text-center space-y-2\">\n              <Skeleton className=\"h-10 sm:h-12 md:h-14 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-full rounded\" />\n            </div>\n          ))}\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.5 }}\n      data-aos=\"zoom-in\"\n    >\n      <Card \n        className=\"p-5 sm:p-6 md:p-7 backdrop-blur-md bg-card/80 hover:shadow-2xl hover:scale-105 transition-all duration-500 border-primary/20 hover:border-primary/40\" \n        data-testid=\"card-countdown\"\n      >\n        <div className=\"flex items-center gap-3 sm:gap-4 mb-4 sm:mb-6\">\n          <motion.div \n            className=\"p-2 sm:p-3 rounded-lg bg-primary/10\"\n            animate={{ \n              scale: [1, 1.1, 1],\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              repeatType: \"reverse\"\n            }}\n          >\n            <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-primary\" />\n          </motion.div>\n          <h3 \n            className=\"font-display font-semibold text-base sm:text-lg md:text-xl\"\n            style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n          >\n            Tournament Starts In\n          </h3>\n        </div>\n        \n        <div className=\"grid grid-cols-4 gap-2 sm:gap-3 md:gap-4\">\n          {[\n            { label: \"Days\", value: timeLeft.days, color: \"text-chart-1\" },\n            { label: \"Hours\", value: timeLeft.hours, color: \"text-chart-2\" },\n            { label: \"Mins\", value: timeLeft.minutes, color: \"text-chart-3\" },\n            { label: \"Secs\", value: timeLeft.seconds, color: \"text-chart-4\" },\n          ].map((item, index) => (\n            <motion.div \n              key={item.label} \n              className=\"text-center\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: index * 0.1, duration: 0.5 }}\n              data-aos=\"fade-up\"\n              data-aos-delay={index * 100}\n            >\n              <motion.div \n                className={`text-xl sm:text-2xl md:text-3xl lg:text-4xl font-display font-bold ${item.color} mb-1 sm:mb-2 p-2 sm:p-3 rounded-lg bg-gradient-to-br from-muted/50 to-muted/20 hover:from-primary/10 hover:to-primary/5 transition-all duration-300 min-h-[48px] sm:min-h-[56px] md:min-h-[64px] flex items-center justify-center`}\n                data-testid={`text-countdown-${item.label.toLowerCase()}`}\n                style={{ fontSize: 'clamp(1.25rem, 4vw, 2.25rem)' }}\n                animate={{ \n                  scale: item.label === \"Secs\" ? [1, 1.05, 1] : 1 \n                }}\n                transition={{ \n                  duration: 1,\n                  repeat: item.label === \"Secs\" ? Infinity : 0 \n                }}\n              >\n                {String(item.value).padStart(2, '0')}\n              </motion.div>\n              <div \n                className=\"text-xs sm:text-sm text-muted-foreground font-medium uppercase tracking-wide\"\n                style={{ fontSize: 'clamp(0.75rem, 1.25vw, 0.875rem)' }}\n              >\n                {item.label}\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":4953},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/tournament/footer.tsx":{"content":"import { MessageCircle, Mail, Trophy, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { motion } from \"framer-motion\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-secondary/50 border-t py-10 sm:py-12 md:py-16\">\n      <div className=\"container mx-auto px-4 sm:px-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 sm:gap-10 md:gap-12 mb-8 md:mb-10\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.5 }}\n            data-aos=\"fade-up\"\n            data-aos-delay=\"0\"\n          >\n            <div className=\"flex items-center gap-3 mb-4 sm:mb-5\">\n              <div className=\"p-2 rounded-lg bg-primary/10 transition-transform duration-300 hover:scale-110\">\n                <Trophy className=\"w-5 h-5 sm:w-6 sm:h-6 text-primary\" />\n              </div>\n              <h3 \n                className=\"font-display font-bold text-base sm:text-lg md:text-xl\"\n                style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n              >\n                PUBG Tournament\n              </h3>\n            </div>\n            <p \n              className=\"text-sm sm:text-base text-muted-foreground leading-relaxed\"\n              style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n            >\n              Ultimate PUBG Mobile Squad Championship. Register your team and compete for amazing prizes!\n            </p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.5, delay: 0.1 }}\n            data-aos=\"fade-up\"\n            data-aos-delay=\"100\"\n          >\n            <h3 \n              className=\"font-display font-semibold mb-4 sm:mb-5 text-base sm:text-lg\"\n              style={{ fontSize: 'clamp(1rem, 2vw, 1.125rem)' }}\n            >\n              Contact Us\n            </h3>\n            <div className=\"space-y-3 sm:space-y-4\">\n              <a \n                href=\"https://wa.me/your-number\" \n                className=\"flex items-center gap-3 text-sm sm:text-base text-muted-foreground hover:text-primary transition-all duration-300 group min-h-[44px]\"\n                data-testid=\"link-whatsapp\"\n                style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n              >\n                <div className=\"p-2 rounded-lg bg-muted/50 group-hover:bg-primary/10 transition-colors duration-300\">\n                  <MessageCircle className=\"w-4 h-4 sm:w-5 sm:h-5 group-hover:scale-110 transition-transform duration-300\" />\n                </div>\n                <span>WhatsApp Support</span>\n              </a>\n              <a \n                href=\"mailto:support@tournament.com\" \n                className=\"flex items-center gap-3 text-sm sm:text-base text-muted-foreground hover:text-primary transition-all duration-300 group min-h-[44px]\"\n                data-testid=\"link-email\"\n                style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n              >\n                <div className=\"p-2 rounded-lg bg-muted/50 group-hover:bg-primary/10 transition-colors duration-300\">\n                  <Mail className=\"w-4 h-4 sm:w-5 sm:h-5 group-hover:scale-110 transition-transform duration-300\" />\n                </div>\n                <span>Email Us</span>\n              </a>\n            </div>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n            data-aos=\"fade-up\"\n            data-aos-delay=\"200\"\n          >\n            <h3 \n              className=\"font-display font-semibold mb-4 sm:mb-5 text-base sm:text-lg\"\n              style={{ fontSize: 'clamp(1rem, 2vw, 1.125rem)' }}\n            >\n              Important\n            </h3>\n            <ul className=\"space-y-2 sm:space-y-3 text-sm sm:text-base text-muted-foreground\" style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}>\n              <li className=\"flex items-start gap-2 transition-colors duration-300 hover:text-foreground\">\n                <span className=\"text-primary mt-1\">•</span>\n                <span>Room details shared 15 mins before match</span>\n              </li>\n              <li className=\"flex items-start gap-2 transition-colors duration-300 hover:text-foreground\">\n                <span className=\"text-primary mt-1\">•</span>\n                <span>All payments are non-refundable</span>\n              </li>\n              <li className=\"flex items-start gap-2 transition-colors duration-300 hover:text-foreground\">\n                <span className=\"text-primary mt-1\">•</span>\n                <span>Organizers' decisions are final</span>\n              </li>\n              <li className=\"flex items-start gap-2 transition-colors duration-300 hover:text-foreground\">\n                <span className=\"text-primary mt-1\">•</span>\n                <span>Fair play is mandatory</span>\n              </li>\n            </ul>\n          </motion.div>\n        </div>\n\n        <motion.div \n          className=\"border-t pt-6 sm:pt-8 text-center text-sm sm:text-base text-muted-foreground\"\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.5, delay: 0.3 }}\n          data-aos=\"fade-up\"\n          data-aos-delay=\"300\"\n          style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n        >\n          <p className=\"mb-2\">© 2025 PUBG Mobile Tournament. All rights reserved.</p>\n          <p className=\"mb-4\">Good luck, warriors! May the best squad win.</p>\n          <Link href=\"/admin/login\">\n            <button \n              className=\"mt-2 text-xs sm:text-sm opacity-30 hover:opacity-100 transition-all duration-300 flex items-center gap-2 mx-auto min-h-[44px] px-4 hover:scale-105\" \n              data-testid=\"link-admin\"\n              style={{ fontSize: 'clamp(0.75rem, 1.25vw, 0.875rem)' }}\n            >\n              <Shield className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n              Admin\n            </button>\n          </Link>\n        </motion.div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":6345},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"replit.md":{"content":"# Gaming Tournament Platform\n\nA professional, modern, and fully responsive tournament registration platform for PUBG Mobile and Free Fire tournaments with real-time slot tracking, admin dashboard, and Excel export functionality.\n\n## 🎮 Features\n\n### User-Facing Features\n\n#### PUBG Mobile Tournament\n- **Max Teams**: 25 Teams\n- **Entry Fee**: ₹80 per team\n- **Prize Pool**: \n  - Winner: ₹1000\n  - Runner-up: ₹400\n- **Game Mode**: Squad (4 Players)\n- **Map**: Erangel (Classic)\n\n#### Free Fire Tournament\n- **Max Teams**: 12 Teams\n- **Entry Fee**: ₹80 per team\n- **Prize Pool**:\n  - Winner: ₹500\n  - Runner-up: ₹260\n- **Game Mode**: Squad (4 Players)\n- **Map**: Bermuda / Purgatory / Kalahari\n\n### Core Features\n\n1. **Dual Tournament System**\n   - Separate pages for PUBG and Free Fire\n   - Independent team registration and slot tracking\n   - Different tournament configurations\n\n2. **Real-Time Slot Tracking**\n   - Live updates every 5 seconds\n   - Visual progress bar showing filled slots\n   - Automatic alerts when slots are almost full\n   - Prevents over-registration\n\n3. **Professional Registration Form**\n   - Team information (name, leader details)\n   - 4 player details with IDs\n   - Payment screenshot upload (Base64)\n   - Transaction ID validation\n   - YouTube live streaming vote (Yes/No)\n   - Terms and conditions agreement\n   - Real-time form validation\n\n4. **Modern UI/UX**\n   - Responsive design for all devices\n   - Animated hero sections with gaming aesthetics\n   - Framer Motion animations\n   - Professional color scheme (Orange/Gaming theme)\n   - Custom fonts (Rajdhani for display, Inter for body)\n   - Glassmorphism effects\n   - Hover animations and transitions\n\n5. **Admin Dashboard**\n   - Secure login system\n   - Real-time statistics for both tournaments\n   - Team management (approve/reject/pending)\n   - Bulk operations\n   - Search and filter functionality\n   - Admin notes for each team\n   - Payment screenshot verification\n\n6. **Excel Export System**\n   - Separate exports for PUBG teams\n   - Separate exports for Free Fire teams\n   - Combined export for all teams\n   - Automatic file saving to exports folder structure:\n     - `exports/pubg/` - PUBG team data\n     - `exports/freefire/` - Free Fire team data\n     - `exports/all/` - Combined data\n   - Includes all team details, payment info, and YouTube votes\n\n### Technical Features\n\n1. **Database (PostgreSQL)**\n   - Persistent data storage\n   - Two main tables: `admin_users`, `teams`\n   - Real-time data synchronization\n   - Drizzle ORM for type-safety\n\n2. **Security**\n   - Password hashing with bcrypt\n   - Session-based authentication\n   - Admin-only routes protection\n   - Input validation with Zod\n   - CSRF protection\n\n3. **Performance**\n   - React Query for data caching\n   - Optimized re-renders\n   - Lazy loading\n   - 5-second polling for real-time updates\n\n## 🏗️ Project Structure\n\n```\nclient/\n├── src/\n│   ├── components/\n│   │   ├── tournament/\n│   │   │   ├── hero.tsx\n│   │   │   ├── countdown-timer.tsx\n│   │   │   ├── slot-counter.tsx\n│   │   │   ├── tournament-details.tsx\n│   │   │   ├── prize-pool.tsx\n│   │   │   ├── tournament-rules.tsx\n│   │   │   ├── registered-teams.tsx\n│   │   │   ├── game-registration-form.tsx\n│   │   │   └── footer.tsx\n│   │   ├── ui/ (shadcn components)\n│   │   ├── navbar.tsx\n│   │   └── theme-toggle.tsx\n│   ├── pages/\n│   │   ├── pubg-tournament.tsx\n│   │   ├── free-fire-tournament.tsx\n│   │   ├── admin-login.tsx\n│   │   ├── admin-dashboard.tsx\n│   │   └── not-found.tsx\n│   ├── lib/\n│   │   ├── queryClient.ts\n│   │   └── utils.ts\n│   └── App.tsx\nserver/\n├── routes.ts (API endpoints)\n├── storage.ts (Database operations)\n├── db.ts (Database connection)\n├── init-db.ts (Database initialization)\n└── index.ts (Express server)\nshared/\n└── schema.ts (TypeScript types & Zod schemas)\nexports/\n├── pubg/ (PUBG team Excel files)\n├── freefire/ (Free Fire team Excel files)\n└── all/ (Combined Excel files)\n```\n\n## 🔐 Admin Access\n\n**Default Credentials** (Change after first login):\n- Username: `admin`\n- Password: `admin123`\n\nAccess admin panel: Click the small \"Admin\" button in the footer or navigate to `/admin/login`\n\n## 🎨 Design Guidelines\n\n### Color Scheme\n- Primary: Orange (#FF6B1A) - Gaming/Action theme\n- Chart colors for different sections\n- Professional dark/light mode support\n\n### Typography\n- Display Font: Rajdhani (Bold, Gaming aesthetic)\n- Body Font: Inter (Clean, Modern)\n- Headings use display font\n- Body text uses sans font\n\n### Animations\n- Hero section gradient orbs\n- Card hover effects with scale\n- Framer Motion page transitions\n- Pulse effects for urgent elements\n- Smooth scrolling\n\n## 📝 Key Features Implementation\n\n### YouTube Live Streaming Vote\nEvery registration form includes a voting option:\n- \"Do you want to watch the match live on YouTube?\"\n- Options: Yes / No\n- Stored in database for analysis\n- Admin can see vote counts\n\n### Real-Time Slot Management\n- Automatically refreshes every 5 seconds\n- Shows: X/Y teams registered\n- Progress bar visualization\n- Prevents over-booking\n- Different limits for PUBG (25) and Free Fire (12)\n\n### Payment Verification\n- QR code displayed in registration form\n- Screenshot upload required\n- Transaction ID required\n- Admin can view payment screenshots\n- Approve/reject based on payment verification\n\n### Team Status Management\n- **Pending**: Newly registered, awaiting approval\n- **Approved**: Payment verified, team confirmed\n- **Rejected**: Payment issues or rule violations\n\n## 🚀 Running the Application\n\n### Development (Replit)\nThe workflow \"Start application\" runs `npm run dev` which:\n1. Connects to Neon PostgreSQL cloud database\n2. Initializes tables if needed\n3. Creates default admin user\n4. Starts Express server (backend)\n5. Starts Vite server (frontend)\n6. Serves on port 5000\n\n### Production (Vercel Deployment)\n\n#### Database Setup\nThis application uses **Neon PostgreSQL** for cloud database with real-time sync across all users and instances.\n\n**✅ Database is already configured in Replit:**\n- Connected to Neon serverless PostgreSQL\n- DATABASE_URL is set in environment variables\n- Data syncs across all users in real-time\n- Works seamlessly on Vercel without changes\n\n#### Deploying to Vercel\n\n1. **Push to GitHub:**\n   ```bash\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   git remote add origin <your-github-repo>\n   git push -u origin main\n   ```\n\n2. **Import to Vercel:**\n   - Go to [vercel.com](https://vercel.com)\n   - Click \"New Project\"\n   - Import your GitHub repository\n   - Vercel will auto-detect the configuration from `vercel.json`\n\n3. **Set Environment Variables in Vercel:**\n   Go to Project Settings → Environment Variables and add:\n   \n   **Required:**\n   - `DATABASE_URL` - Your Neon PostgreSQL connection string (get from Replit secrets or create new Neon database)\n   - `SESSION_SECRET` - Random string for session encryption (generate with `openssl rand -base64 32`)\n   \n   **Optional (for Pusher real-time features):**\n   - `PUSHER_APP_ID` - Your Pusher app ID\n   - `PUSHER_KEY` - Your Pusher key\n   - `PUSHER_SECRET` - Your Pusher secret\n   - `PUSHER_CLUSTER` - Your Pusher cluster (e.g., \"ap2\")\n   - `VITE_PUSHER_KEY` - Same as PUSHER_KEY (for frontend)\n   - `VITE_PUSHER_CLUSTER` - Same as PUSHER_CLUSTER (for frontend)\n\n4. **Deploy:**\n   - Click \"Deploy\"\n   - Vercel will build and deploy automatically\n   - Your app will be live at `https://your-app.vercel.app`\n\n#### Post-Deployment\n- Access admin panel at: `https://your-app.vercel.app/admin/login`\n- Default credentials: `admin` / `admin123`\n- **IMPORTANT:** Change the admin password immediately after first login!\n\n#### Database Migration on Vercel\nThe app automatically runs database initialization on first deployment:\n- Creates `admin_users` table\n- Creates `teams` table\n- Creates default admin user\n- All data is stored in Neon PostgreSQL cloud database\n\n## 📊 Database Schema\n\n### Teams Table\n```typescript\n{\n  id: string (UUID)\n  gameType: \"pubg\" | \"freefire\"\n  teamName: string\n  leaderName: string\n  leaderWhatsapp: string (10 digits)\n  leaderPlayerId: string\n  player2Name: string\n  player2PlayerId: string\n  player3Name: string\n  player3PlayerId: string\n  player4Name: string\n  player4PlayerId: string\n  youtubeVote: \"yes\" | \"no\"\n  transactionId: string\n  paymentScreenshot: string (Base64)\n  agreedToTerms: 1\n  status: \"pending\" | \"approved\" | \"rejected\"\n  adminNotes: string (optional)\n  createdAt: timestamp\n  updatedAt: timestamp\n}\n```\n\n### Admin Users Table\n```typescript\n{\n  id: number (serial)\n  username: string (unique)\n  password: string (bcrypt hashed)\n  createdAt: timestamp\n}\n```\n\n## 🎯 User Flow\n\n### Team Registration\n1. Visit `/pubg` or `/free-fire`\n2. View tournament details, rules, prize pool\n3. Check available slots\n4. Click \"Register Your Squad\"\n5. Fill team and player information\n6. Make payment via QR code\n7. Upload payment screenshot\n8. Vote for YouTube live streaming\n9. Agree to terms\n10. Submit registration\n11. Wait for admin approval\n\n### Admin Workflow\n1. Login at `/admin/login`\n2. View dashboard with real-time stats\n3. See all pending registrations\n4. View payment screenshots\n5. Approve or reject teams\n6. Add admin notes if needed\n7. Export data to Excel\n8. Monitor both tournaments separately\n\n## 🔒 Security Features\n\n- Bcrypt password hashing\n- Session-based authentication\n- Protected admin routes\n- Input validation (Zod)\n- SQL injection prevention (Drizzle ORM)\n- XSS protection\n- Payment screenshot verification\n\n## 📱 Responsive Design\n\n- Mobile-first approach\n- Breakpoints:\n  - Mobile: < 768px\n  - Tablet: 768px - 1024px\n  - Desktop: > 1024px\n- Touch-friendly buttons\n- Optimized images\n- Smooth scrolling\n\n## 🎨 Professional Features\n\n- Custom gradient text effects\n- Glassmorphism cards\n- Animated background orbs\n- Smooth page transitions\n- Hover scale effects\n- Loading states\n- Error handling\n- Toast notifications\n- Skeleton loaders\n\n## 📦 Technologies Used\n\n**Frontend:**\n- React 18\n- TypeScript\n- TanStack Query (React Query)\n- Wouter (Routing)\n- Tailwind CSS\n- shadcn/ui Components\n- Framer Motion\n- Lucide Icons\n\n**Backend:**\n- Express.js\n- TypeScript\n- PostgreSQL\n- Drizzle ORM\n- Bcrypt\n- ExcelJS\n- Express Session\n\n**Development:**\n- Vite\n- Drizzle Kit\n- TSX\n\n## 🎯 Future Enhancements (Optional)\n\n- [ ] Email notifications\n- [ ] SMS notifications via Twilio\n- [ ] WhatsApp integration\n- [ ] Live match updates\n- [ ] Tournament brackets\n- [ ] Player statistics\n- [ ] Multiple tournaments support\n- [ ] Team profile pages\n- [ ] Leaderboards\n\n## 📋 Testing Checklist\n\n✅ PUBG page loads correctly\n✅ Free Fire page loads correctly\n✅ Navigation works\n✅ Slot counter updates in real-time\n✅ Registration form validates correctly\n✅ Payment screenshot upload works\n✅ YouTube vote saves correctly\n✅ Admin login works\n✅ Admin dashboard shows correct stats\n✅ Team approval/rejection works\n✅ Excel export works (PUBG/Free Fire/All)\n✅ Excel files save to correct folders\n✅ Search and filter work\n✅ Bulk operations work\n✅ Responsive on all devices\n✅ No console errors\n✅ No LSP errors\n✅ Database persists data correctly\n\n## 🎮 Tournament Rules Implemented\n\n- Squad mode (4 players per team)\n- Mobile-only platform\n- Fair play policy\n- No refunds\n- Punctuality requirements\n- Code of conduct\n- Streaming allowed\n- Disconnect policy\n- Prize distribution via UPI\n\n---\n\n**Built with ❤️ for Gaming Community**\n**Last Updated**: October 19, 2025\n","size_bytes":11822},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport AOS from 'aos';\nimport 'aos/dist/aos.css';\n\nAOS.init({\n  duration: 800,\n  easing: 'ease-out-cubic',\n  once: false,\n  mirror: true,\n  offset: 100,\n  delay: 100,\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":328},"client/src/lib/pusher.ts":{"content":"import Pusher from \"pusher-js\";\n\nexport const pusher = new Pusher(import.meta.env.VITE_PUSHER_KEY || \"\", {\n  cluster: import.meta.env.VITE_PUSHER_CLUSTER || \"ap2\",\n});\n\nexport const tournamentChannel = pusher.subscribe(\"tournament\");\n","size_bytes":234},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/storage.ts":{"content":"import { type Team, type InsertTeam, type Admin, type InsertAdmin, TOURNAMENT_CONFIG, teams, adminUsers } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, count, or, like, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getAllTeams(): Promise<Team[]>;\n  getTeam(id: string): Promise<Team | undefined>;\n  createTeam(team: InsertTeam): Promise<Team>;\n  getTeamCount(): Promise<number>;\n  getTeamCountByGameType(gameType: string): Promise<number>;\n  getTeamCountByStatus(status?: string): Promise<number>;\n  updateTeamStatus(id: string, status: string): Promise<Team>;\n  updateTeamNotes(id: string, notes: string): Promise<Team>;\n  searchTeams(query: string, status?: string): Promise<Team[]>;\n  bulkUpdateStatus(ids: string[], status: string): Promise<Team[]>;\n  getAdminByUsername(username: string): Promise<Admin | undefined>;\n  createAdmin(admin: InsertAdmin): Promise<Admin>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getAllTeams(): Promise<Team[]> {\n    return await db.select().from(teams).orderBy(teams.createdAt);\n  }\n\n  async getTeam(id: string): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team || undefined;\n  }\n\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const gameType = insertTeam.gameType;\n    const teamCount = await this.getTeamCountByGameType(gameType);\n    \n    const maxTeams = gameType === 'pubg' ? TOURNAMENT_CONFIG.PUBG.MAX_TEAMS : TOURNAMENT_CONFIG.FREE_FIRE.MAX_TEAMS;\n    \n    if (teamCount >= maxTeams) {\n      throw new Error(`Tournament is full. All ${maxTeams} slots for ${gameType.toUpperCase()} have been filled.`);\n    }\n\n    const id = randomUUID();\n    const [team] = await db\n      .insert(teams)\n      .values({\n        ...insertTeam,\n        id,\n        status: \"pending\",\n      })\n      .returning();\n    return team;\n  }\n\n  async getTeamCount(): Promise<number> {\n    const [result] = await db.select({ count: count() }).from(teams);\n    return result.count;\n  }\n\n  async getTeamCountByGameType(gameType: string): Promise<number> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(teams)\n      .where(eq(teams.gameType, gameType));\n    return result.count;\n  }\n\n  async getTeamCountByStatus(status?: string): Promise<number> {\n    if (status) {\n      const [result] = await db\n        .select({ count: count() })\n        .from(teams)\n        .where(eq(teams.status, status));\n      return result.count;\n    }\n    return this.getTeamCount();\n  }\n\n  async updateTeamStatus(id: string, status: string): Promise<Team> {\n    const [team] = await db\n      .update(teams)\n      .set({ status, updatedAt: sql`NOW()` })\n      .where(eq(teams.id, id))\n      .returning();\n    return team;\n  }\n\n  async updateTeamNotes(id: string, notes: string): Promise<Team> {\n    const [team] = await db\n      .update(teams)\n      .set({ adminNotes: notes, updatedAt: sql`NOW()` })\n      .where(eq(teams.id, id))\n      .returning();\n    return team;\n  }\n\n  async searchTeams(query: string, status?: string): Promise<Team[]> {\n    if (query && status) {\n      const searchPattern = `%${query}%`;\n      const conditions = or(\n        like(teams.teamName, searchPattern),\n        like(teams.leaderName, searchPattern),\n        like(teams.leaderWhatsapp, searchPattern),\n        like(teams.transactionId, searchPattern)\n      );\n\n      const results = await db\n        .select()\n        .from(teams)\n        .where(\n          sql`${conditions} AND ${eq(teams.status, status)}`\n        )\n        .orderBy(teams.createdAt);\n      return results;\n    }\n\n    if (query) {\n      const searchPattern = `%${query}%`;\n      const conditions = or(\n        like(teams.teamName, searchPattern),\n        like(teams.leaderName, searchPattern),\n        like(teams.leaderWhatsapp, searchPattern),\n        like(teams.transactionId, searchPattern)\n      );\n\n      return await db\n        .select()\n        .from(teams)\n        .where(conditions)\n        .orderBy(teams.createdAt);\n    }\n\n    if (status) {\n      return await db\n        .select()\n        .from(teams)\n        .where(eq(teams.status, status))\n        .orderBy(teams.createdAt);\n    }\n\n    return this.getAllTeams();\n  }\n\n  async bulkUpdateStatus(ids: string[], status: string): Promise<Team[]> {\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const updatedTeams = await db\n      .update(teams)\n      .set({ status, updatedAt: sql`NOW()` })\n      .where(inArray(teams.id, ids))\n      .returning();\n    return updatedTeams;\n  }\n\n  async getAdminByUsername(username: string): Promise<Admin | undefined> {\n    const [admin] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return admin || undefined;\n  }\n\n  async createAdmin(insertAdmin: InsertAdmin): Promise<Admin> {\n    const [admin] = await db\n      .insert(adminUsers)\n      .values(insertAdmin)\n      .returning();\n    return admin;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5045},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"scripts/create-admin.ts":{"content":"import { db } from \"../server/db\";\nimport { adminUsers } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport { eq } from \"drizzle-orm\";\n\nasync function createAdmin() {\n  const username = process.env.ADMIN_USERNAME || \"admin\";\n  const password = process.env.ADMIN_PASSWORD || \"admin123\";\n\n  try {\n    const [existingAdmin] = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.username, username));\n\n    if (existingAdmin) {\n      console.log(`Admin user '${username}' already exists.`);\n      process.exit(0);\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const [admin] = await db\n      .insert(adminUsers)\n      .values({\n        username,\n        password: hashedPassword,\n      })\n      .returning();\n\n    console.log(`Admin user created successfully!`);\n    console.log(`Username: ${admin.username}`);\n    console.log(`Password: ${password}`);\n    console.log(`\\nPlease change your password after first login.`);\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Error creating admin:\", error);\n    process.exit(1);\n  }\n}\n\ncreateAdmin();\n","size_bytes":1116},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"server/db.ts":{"content":"import { Pool as NeonPool, neonConfig } from \"@neondatabase/serverless\";\nimport { Pool as PgPool } from \"pg\";\nimport { drizzle as drizzleNeon } from \"drizzle-orm/neon-serverless\";\nimport { drizzle as drizzlePg } from \"drizzle-orm/node-postgres\";\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet _pool: NeonPool | PgPool | null = null;\nlet _db: ReturnType<typeof drizzleNeon> | ReturnType<typeof drizzlePg> | null =\n  null;\n\nfunction initializeDb() {\n  if (!process.env.DATABASE_URL || process.env.DATABASE_URL.trim() === \"\") {\n    throw new Error(\n      \"DATABASE_URL must be set. Did you forget to provision a database?\"\n    );\n  }\n\n  if (!_pool) {\n    const dbUrl = process.env.DATABASE_URL;\n\n    if (dbUrl.includes(\"neon\") || dbUrl.includes(\"wss://\")) {\n      console.log(\"📊 Using Neon serverless database\");\n      _pool = new NeonPool({ connectionString: dbUrl, max: 1 }); // max: 1 for Vercel serverless\n      _db = drizzleNeon({ client: _pool as NeonPool, schema });\n    } else {\n      console.log(\"📊 Using PostgreSQL database\");\n      _pool = new PgPool({ connectionString: dbUrl, max: 1 }); // max: 1 for Vercel serverless\n      _db = drizzlePg({ client: _pool as PgPool, schema });\n    }\n  }\n}\n\nexport const pool = new Proxy({} as NeonPool | PgPool, {\n  get(_target, prop) {\n    if (!_pool) initializeDb();\n    return (_pool as any)[prop];\n  },\n});\n\nexport const db = new Proxy(\n  {} as ReturnType<typeof drizzleNeon> & ReturnType<typeof drizzlePg>,\n  {\n    get(_target, prop) {\n      if (!_db) initializeDb();\n      return (_db as any)[prop];\n    },\n  }\n);\n","size_bytes":1631},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/tournament/tournament-rules.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { \n  Shield, \n  Users, \n  Ban, \n  CheckCircle, \n  XCircle, \n  Clock, \n  MessageSquare, \n  Video,\n  AlertTriangle,\n  Wallet\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface TournamentRulesProps {\n  gameType: \"pubg\" | \"freefire\";\n}\n\nexport function TournamentRules({ gameType }: TournamentRulesProps) {\n  const playerIdLabel = gameType === \"pubg\" ? \"PUBG IDs\" : \"Free Fire UIDs\";\n  \n  const rules = [\n    {\n      icon: Users,\n      title: \"Team Composition\",\n      description: \"Each team must have exactly 4 members. All player details must be accurate and final.\",\n      variant: \"default\" as const,\n    },\n    {\n      icon: Shield,\n      title: \"Platform Restriction\",\n      description: \"Only mobile players are allowed. Emulator players are strictly prohibited.\",\n      variant: \"default\" as const,\n    },\n    {\n      icon: Ban,\n      title: \"Fair Play Policy\",\n      description: \"No hacks, cheats, glitches, or third-party tools. Violations lead to immediate disqualification.\",\n      variant: \"destructive\" as const,\n    },\n    {\n      icon: CheckCircle,\n      title: \"Registration Finality\",\n      description: `Team names and ${playerIdLabel} are final after submission. No changes will be permitted.`,\n      variant: \"default\" as const,\n    },\n    {\n      icon: XCircle,\n      title: \"No Refund Policy\",\n      description: \"Once registered, fees are non-refundable under any circumstances.\",\n      variant: \"destructive\" as const,\n    },\n    {\n      icon: Clock,\n      title: \"Punctuality Required\",\n      description: \"Room ID and password shared 15 minutes before match. Teams must join on time - no late entries.\",\n      variant: \"default\" as const,\n    },\n    {\n      icon: MessageSquare,\n      title: \"Code of Conduct\",\n      description: \"Good behavior and fair play are mandatory. Toxic behavior results in disqualification.\",\n      variant: \"default\" as const,\n    },\n    {\n      icon: Video,\n      title: \"Streaming Allowed\",\n      description: \"Recording or streaming is permitted, but please mention the official tournament name.\",\n      variant: \"default\" as const,\n    },\n    {\n      icon: AlertTriangle,\n      title: \"Disconnect Policy\",\n      description: \"If a player disconnects during match, no rematch or refund will be given.\",\n      variant: \"destructive\" as const,\n    },\n    {\n      icon: Wallet,\n      title: \"Prize Distribution\",\n      description: \"Top 2 teams receive prize money directly via UPI/Paytm/PhonePe after verification.\",\n      variant: \"default\" as const,\n    },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.08,\n        delayChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <section id=\"rules\" className=\"py-12 sm:py-16 md:py-20 lg:py-28 container mx-auto px-4 sm:px-6\">\n      <motion.div \n        className=\"text-center mb-10 sm:mb-12 md:mb-16\"\n        initial={{ opacity: 0, y: 20 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        viewport={{ once: true, margin: \"-100px\" }}\n        transition={{ duration: 0.6 }}\n        data-aos=\"fade-up\"\n      >\n        <h2 \n          className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-display font-extrabold mb-4 sm:mb-5\" \n          style={{ fontSize: 'clamp(1.875rem, 5vw, 3.75rem)' }}\n          data-testid=\"text-section-rules\"\n        >\n          Rules & Regulations\n        </h2>\n        <p \n          className=\"text-foreground/80 text-base sm:text-lg md:text-xl max-w-3xl mx-auto font-medium\"\n          style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n        >\n          Please read all rules carefully before registering. Organizers' decisions are final.\n        </p>\n      </motion.div>\n\n      <motion.div \n        className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 md:gap-8 max-w-7xl mx-auto\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n      >\n        {rules.map((rule, index) => (\n          <motion.div\n            key={index}\n            variants={itemVariants}\n            data-aos=\"fade-right\"\n            data-aos-delay={index * 50}\n          >\n            <Card \n              className={`p-5 sm:p-6 md:p-7 hover-elevate transition-all duration-500 hover:scale-[1.02] group min-h-[140px] sm:min-h-[160px] ${\n                rule.variant === 'destructive' ? 'border-destructive/40 hover:border-destructive/60 hover:shadow-destructive/20' : 'hover:border-primary/30 hover:shadow-primary/10'\n              } hover:shadow-xl`}\n              data-testid={`card-rule-${index}`}\n            >\n              <div className=\"flex items-start gap-4 sm:gap-5\">\n                <div className={`p-3 sm:p-4 rounded-xl flex-shrink-0 transition-all duration-500 group-hover:scale-110 group-hover:rotate-3 min-w-[52px] min-h-[52px] sm:min-w-[56px] sm:min-h-[56px] flex items-center justify-center ${\n                  rule.variant === 'destructive' \n                    ? 'bg-destructive/15' \n                    : 'bg-primary/15'\n                }`}>\n                  <rule.icon className={`w-5 h-5 sm:w-6 sm:h-6 transition-transform duration-500 group-hover:scale-110 ${\n                    rule.variant === 'destructive' \n                      ? 'text-destructive' \n                      : 'text-primary'\n                  }`} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 \n                    className=\"font-display font-bold text-base sm:text-lg md:text-xl mb-2\"\n                    style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n                  >\n                    {rule.title}\n                  </h3>\n                  <p \n                    className=\"text-sm sm:text-base text-foreground/70 leading-relaxed\"\n                    style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n                  >\n                    {rule.description}\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        ))}\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":6355},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initial = stored || \"dark\";\n    setTheme(initial);\n    document.documentElement.classList.toggle(\"dark\", initial === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"rounded-full\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"w-5 h-5\" />\n      ) : (\n        <Sun className=\"w-5 h-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1030},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"design_guidelines.md":{"content":"# PUBG Mobile Tournament Registration - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Gaming/Esports Reference-Based Design\n**Inspiration:** Modern gaming platforms (Twitch, Discord, Valorant, League of Legends tournament sites)\n**Rationale:** Tournament registration requires excitement and professionalism - dark theme with vibrant gaming accents creates trust while maintaining energy\n\n**Core Design Principles:**\n- High-contrast dark theme for gaming aesthetic\n- Bold, impactful typography for tournament information\n- Strategic use of gaming-inspired accent colors\n- Professional yet energetic visual hierarchy\n- Clear information architecture for complex registration process\n\n## Color Palette\n\n**Dark Mode (Primary):**\n- Background Primary: 220 15% 8% (deep navy-black)\n- Background Secondary: 220 15% 12% (elevated surfaces)\n- Background Tertiary: 220 15% 16% (cards, form fields)\n\n**Brand & Accent Colors:**\n- Primary Brand: 25 95% 53% (vibrant orange-red, PUBG-inspired)\n- Secondary Accent: 200 95% 55% (electric cyan for highlights)\n- Success: 142 76% 36% (green for confirmed registrations)\n- Warning: 45 93% 47% (gold for important notices)\n\n**Text Colors:**\n- Primary Text: 0 0% 98% (near-white)\n- Secondary Text: 220 9% 65% (muted gray)\n- Tertiary Text: 220 9% 46% (subtle gray)\n\n## Typography\n\n**Font Families:**\n- Primary: 'Inter' (Google Fonts) - clean, professional for body text and forms\n- Display: 'Rajdhani' or 'Orbitron' (Google Fonts) - bold, gaming-inspired for headings and hero\n\n**Type Scale:**\n- Hero Headline: text-5xl/text-6xl font-bold (56-60px desktop)\n- Section Headers: text-3xl/text-4xl font-bold (36-48px)\n- Subsection Headers: text-xl/text-2xl font-semibold (24-30px)\n- Body Text: text-base/text-lg (16-18px)\n- Small Text: text-sm (14px)\n- Micro Text: text-xs (12px)\n\n**Font Weights:** 400 (regular), 600 (semibold), 700 (bold)\n\n## Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 8, 12, 16, 20, 24 (e.g., p-4, gap-8, mb-12)\n\n**Container Strategy:**\n- Max Width: max-w-6xl for content sections\n- Padding: px-4 (mobile), px-6 (tablet), px-8 (desktop)\n- Section Spacing: py-16 (mobile), py-20 (tablet), py-24 (desktop)\n\n**Grid System:**\n- Tournament Info: 2-column grid (lg:grid-cols-2) for details/prizes\n- Form Sections: Single column with max-w-2xl for readability\n- Team Display: 3-column grid (md:grid-cols-2 lg:grid-cols-3) for registered teams\n\n## Component Library\n\n**Navigation:**\n- Sticky dark header with glass morphism effect (backdrop-blur-lg)\n- Logo left, navigation links center, CTA button right\n- Height: h-16 with border-b in subtle accent color\n\n**Hero Section:**\n- Full-width dark gradient background with PUBG-themed imagery\n- Height: min-h-[600px] with centered content\n- Headline + subheadline + dual CTAs (Register + Learn More)\n- Countdown timer widget with glowing effect\n- Slot counter badge (e.g., \"15/25 Slots Filled\")\n\n**Tournament Details Cards:**\n- Dark elevated cards (bg-secondary) with border accent on hover\n- Icon + Title + Description layout\n- Subtle shadow: shadow-xl with colored glow on hover\n- Padding: p-6 with rounded-xl corners\n\n**Registration Form:**\n- Multi-section form with clear step indicators\n- Dark input fields (bg-tertiary) with focus ring in primary color\n- Floating labels or top-aligned labels with text-sm\n- Upload area with drag-and-drop visual feedback\n- Large submit button with gradient background\n\n**Prize Pool Display:**\n- Prominent cards with gold/silver/bronze accents\n- Large prize amounts with currency symbol\n- Podium-style layout (1st place centered and larger)\n\n**Rules Section:**\n- Accordion-style or numbered list with icons\n- Each rule in a subtle card with left border accent\n- Warning/important rules highlighted in warning color\n\n**Team Roster Display:**\n- Grid of team cards showing team name, leader, player count\n- Status badge (Confirmed/Pending)\n- Subtle hover lift effect\n\n**Footer:**\n- Dark with three columns: Contact, Quick Links, Social\n- WhatsApp contact prominently displayed\n- Tournament logo and tagline\n\n## Animations\n\n**Use Sparingly - Professional Only:**\n- Hero: Fade-in on load (0.6s ease-out)\n- Scroll Reveals: Slide-up with fade (0.4s ease-out) for sections as they enter viewport\n- Cards: Subtle lift on hover (transform: translateY(-4px), 0.2s)\n- Buttons: Scale on hover (scale-105, 0.2s) and active state (scale-95)\n- Form Focus: Smooth border color transition (0.2s)\n- Countdown Timer: Number flip animation when updating\n- Slot Counter: Pulse effect when slots are filling up\n- Success States: Checkmark scale-in animation on form submission\n\n**No Animations For:**\n- Background elements\n- Navigation links (color transition only)\n- Text content\n- Static images\n\n## Images\n\n**Hero Section:**\n- Large hero background image: PUBG Mobile gameplay scene or tournament battle scene\n- Dimensions: 1920x1080 minimum\n- Treatment: Dark overlay (opacity-60) with gradient from bottom\n- Position: Cover entire hero section with center positioning\n- Alternative: Use PUBG character silhouettes with action poses\n\n**Tournament Prize Section:**\n- Trophy/medal icons or illustrated graphics (not photos)\n- 3D rendered trophies in gold/silver colors\n\n**Rules Section:**\n- Gaming icons (weapon icons, shield, target) from icon libraries\n- No images, rely on iconography\n\n**Team Roster:**\n- Placeholder avatar icons or team logos if provided\n- Default: Generic squad icon for teams without logos\n\n**Payment Upload:**\n- Visual representation of QR code placeholder or payment app icons\n- Screenshot upload area with image preview\n\n**Overall Image Strategy:**\nThe website features ONE large hero image establishing the gaming/tournament atmosphere. Remaining sections use icons, illustrations, and UI graphics rather than photographs to maintain the professional esports aesthetic.","size_bytes":5835},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/admin-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Download, \n  LogOut, \n  Users, \n  CheckCircle, \n  XCircle, \n  Clock,\n  Eye,\n  Loader2,\n  Search,\n  Filter,\n  Gamepad2\n} from \"lucide-react\";\nimport type { Team } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface AdminStats {\n  total: number;\n  pubgTeams: number;\n  freeFireTeams: number;\n  pending: number;\n  approved: number;\n  rejected: number;\n  pubgAvailable: number;\n  freeFireAvailable: number;\n}\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [gameTypeFilter, setGameTypeFilter] = useState<string>(\"all\");\n  const [selectedTeamIds, setSelectedTeamIds] = useState<string[]>([]);\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  const { data: admin, isLoading: adminLoading } = useQuery<{ username: string }>({\n    queryKey: ['/api/admin/me'],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (!adminLoading && !admin) {\n      setLocation(\"/admin/login\");\n    }\n  }, [admin, adminLoading, setLocation]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<AdminStats>({\n    queryKey: ['/api/admin/stats'],\n    refetchInterval: 5000,\n    enabled: !!admin,\n  });\n\n  const buildSearchUrl = () => {\n    const params = new URLSearchParams();\n    if (searchQuery) params.append('query', searchQuery);\n    if (statusFilter && statusFilter !== 'all') params.append('status', statusFilter);\n    return `/api/teams/search?${params.toString()}`;\n  };\n\n  const { data: allTeams = [], isLoading: teamsLoading } = useQuery<Team[]>({\n    queryKey: ['/api/teams/search', searchQuery, statusFilter],\n    queryFn: async () => {\n      const url = buildSearchUrl();\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch teams');\n      return response.json();\n    },\n    enabled: !!admin,\n  });\n\n  const teams = gameTypeFilter === 'all' \n    ? allTeams \n    : allTeams.filter(team => team.gameType === gameTypeFilter);\n\n  useEffect(() => {\n    if (selectedTeam) {\n      setAdminNotes(selectedTeam.adminNotes || \"\");\n    }\n  }, [selectedTeam]);\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/logout\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Logged Out\",\n        description: \"Successfully logged out\",\n      });\n      setLocation(\"/admin/login\");\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/teams/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams/search'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Team status has been updated successfully\",\n      });\n      setSelectedTeam(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateNotesMutation = useMutation({\n    mutationFn: async ({ id, notes }: { id: string; notes: string }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/teams/${id}/notes`, { notes });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams/search'] });\n      toast({\n        title: \"Notes Saved\",\n        description: \"Admin notes have been saved successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Save Failed\",\n        description: error.message || \"Failed to save notes\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const bulkStatusMutation = useMutation({\n    mutationFn: async ({ ids, status }: { ids: string[]; status: string }) => {\n      return await apiRequest(\"POST\", \"/api/admin/teams/bulk-status\", { ids, status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams/search'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      setSelectedTeamIds([]);\n      toast({\n        title: \"Bulk Update Successful\",\n        description: \"Selected teams have been updated\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Bulk Update Failed\",\n        description: error.message || \"Failed to update teams\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExport = async (gameType?: 'pubg' | 'freefire') => {\n    try {\n      const url = gameType \n        ? `/api/admin/teams/export?gameType=${gameType}`\n        : '/api/admin/teams/export';\n      \n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = downloadUrl;\n      const gameName = gameType === 'pubg' ? 'PUBG' : gameType === 'freefire' ? 'FreeFire' : 'All';\n      a.download = `${gameName}-teams-${new Date().toISOString().split('T')[0]}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(downloadUrl);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Export Successful\",\n        description: `${gameName} teams data exported to Excel and saved to exports/${gameType || 'all'} folder`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedTeamIds(teams.map(t => t.id));\n    } else {\n      setSelectedTeamIds([]);\n    }\n  };\n\n  const handleSelectTeam = (teamId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedTeamIds([...selectedTeamIds, teamId]);\n    } else {\n      setSelectedTeamIds(selectedTeamIds.filter(id => id !== teamId));\n    }\n  };\n\n  const handleBulkApprove = () => {\n    if (selectedTeamIds.length === 0) {\n      toast({\n        title: \"No Selection\",\n        description: \"Please select teams to approve\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkStatusMutation.mutate({ ids: selectedTeamIds, status: \"approved\" });\n  };\n\n  const handleBulkReject = () => {\n    if (selectedTeamIds.length === 0) {\n      toast({\n        title: \"No Selection\",\n        description: \"Please select teams to reject\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkStatusMutation.mutate({ ids: selectedTeamIds, status: \"rejected\" });\n  };\n\n  const handleSaveNotes = () => {\n    if (selectedTeam) {\n      updateNotesMutation.mutate({ id: selectedTeam.id, notes: adminNotes });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return \"bg-green-500/10 text-green-500\";\n      case \"rejected\":\n        return \"bg-red-500/10 text-red-500\";\n      default:\n        return \"bg-yellow-500/10 text-yellow-500\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"rejected\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (adminLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!admin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-accent/10\">\n      <div className=\"container mx-auto p-4 md:p-8\">\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n            <p className=\"text-muted-foreground\">Welcome, {admin.username}</p>\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button onClick={() => handleExport('pubg')} variant=\"outline\" size=\"sm\" data-testid=\"button-export-pubg\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export PUBG\n            </Button>\n            <Button onClick={() => handleExport('freefire')} variant=\"outline\" size=\"sm\" data-testid=\"button-export-freefire\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Free Fire\n            </Button>\n            <Button onClick={() => handleExport()} variant=\"outline\" size=\"sm\" data-testid=\"button-export-all\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export All\n            </Button>\n            <Button\n              onClick={() => logoutMutation.mutate()}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Teams</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-total-teams\">{stats?.total || 0}</div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">PUBG Teams</CardTitle>\n              <Gamepad2 className=\"h-4 w-4 text-orange-500\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-pubg-teams\">{stats?.pubgTeams || 0} / 25</div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Free Fire Teams</CardTitle>\n              <Gamepad2 className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-freefire-teams\">{stats?.freeFireTeams || 0} / 25</div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-pending-teams\">{stats?.pending || 0}</div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-approved-teams\">{stats?.approved || 0}</div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              {statsLoading ? (\n                <div className=\"h-8 bg-secondary/50 rounded animate-pulse\"></div>\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid=\"text-rejected-teams\">{stats?.rejected || 0}</div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n              <CardTitle>Registered Teams</CardTitle>\n              <div className=\"flex flex-col sm:flex-row gap-3 w-full md:w-auto\">\n                <div className=\"relative flex-1 md:w-64\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search teams...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-9\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n                <Select value={gameTypeFilter} onValueChange={setGameTypeFilter}>\n                  <SelectTrigger className=\"w-full sm:w-40\" data-testid=\"select-game-filter\">\n                    <Gamepad2 className=\"h-4 w-4 mr-2\" />\n                    <SelectValue placeholder=\"Game\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\" data-testid=\"filter-game-all\">All Games</SelectItem>\n                    <SelectItem value=\"pubg\" data-testid=\"filter-game-pubg\">PUBG</SelectItem>\n                    <SelectItem value=\"freefire\" data-testid=\"filter-game-freefire\">Free Fire</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-full sm:w-40\" data-testid=\"select-status-filter\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\" data-testid=\"filter-all\">All Status</SelectItem>\n                    <SelectItem value=\"pending\" data-testid=\"filter-pending\">Pending</SelectItem>\n                    <SelectItem value=\"approved\" data-testid=\"filter-approved\">Approved</SelectItem>\n                    <SelectItem value=\"rejected\" data-testid=\"filter-rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {selectedTeamIds.length > 0 && (\n              <div className=\"mb-4 p-4 bg-secondary/50 rounded-lg flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n                <span className=\"text-sm font-medium\">\n                  {selectedTeamIds.length} team{selectedTeamIds.length !== 1 ? 's' : ''} selected\n                </span>\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={handleBulkApprove}\n                    disabled={bulkStatusMutation.isPending}\n                    data-testid=\"button-bulk-approve\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Approve Selected\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={handleBulkReject}\n                    disabled={bulkStatusMutation.isPending}\n                    data-testid=\"button-bulk-reject\"\n                  >\n                    <XCircle className=\"w-4 h-4 mr-2\" />\n                    Reject Selected\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {teamsLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n              </div>\n            ) : teams.length === 0 ? (\n              <p className=\"text-center text-muted-foreground py-8\">\n                {searchQuery || statusFilter !== 'all' ? 'No teams found matching your filters' : 'No teams registered yet'}\n              </p>\n            ) : (\n              <>\n                <div className=\"mb-4 flex items-center gap-3\">\n                  <Checkbox\n                    checked={selectedTeamIds.length === teams.length && teams.length > 0}\n                    onCheckedChange={handleSelectAll}\n                    data-testid=\"checkbox-select-all\"\n                  />\n                  <span className=\"text-sm font-medium\">Select All</span>\n                </div>\n                <div className=\"space-y-4\">\n                  {teams.map((team) => (\n                    <Card key={team.id} className=\"hover-elevate\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n                          <div className=\"flex items-start gap-3 flex-1\">\n                            <Checkbox\n                              checked={selectedTeamIds.includes(team.id)}\n                              onCheckedChange={(checked) => handleSelectTeam(team.id, checked as boolean)}\n                              className=\"mt-1\"\n                              data-testid={`checkbox-team-${team.id}`}\n                            />\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <h3 className=\"font-semibold text-lg\" data-testid={`text-team-name-${team.id}`}>\n                                  {team.teamName}\n                                </h3>\n                                <Badge className={getStatusColor(team.status)}>\n                                  <span className=\"flex items-center gap-1\">\n                                    {getStatusIcon(team.status)}\n                                    {team.status}\n                                  </span>\n                                </Badge>\n                              </div>\n                              <div className=\"text-sm text-muted-foreground space-y-1\">\n                                <p>Leader: {team.leaderName} • {team.leaderWhatsapp}</p>\n                                <p>Transaction ID: {team.transactionId}</p>\n                                <p>Registered: {new Date(team.createdAt).toLocaleString()}</p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {team.status === \"pending\" && (\n                              <>\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => updateStatusMutation.mutate({ id: team.id, status: \"approved\" })}\n                                  disabled={updateStatusMutation.isPending}\n                                  data-testid={`button-approve-${team.id}`}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                  Approve\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  onClick={() => updateStatusMutation.mutate({ id: team.id, status: \"rejected\" })}\n                                  disabled={updateStatusMutation.isPending}\n                                  data-testid={`button-reject-${team.id}`}\n                                >\n                                  <XCircle className=\"w-4 h-4 mr-1\" />\n                                  Reject\n                                </Button>\n                              </>\n                            )}\n                            {team.status === \"approved\" && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => updateStatusMutation.mutate({ id: team.id, status: \"rejected\" })}\n                                disabled={updateStatusMutation.isPending}\n                                data-testid={`button-reject-${team.id}`}\n                              >\n                                <XCircle className=\"w-4 h-4 mr-1\" />\n                                Reject\n                              </Button>\n                            )}\n                            {team.status === \"rejected\" && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => updateStatusMutation.mutate({ id: team.id, status: \"approved\" })}\n                                disabled={updateStatusMutation.isPending}\n                                data-testid={`button-approve-${team.id}`}\n                                className=\"bg-green-600 hover:bg-green-700\"\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Approve\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setSelectedTeam(team)}\n                              data-testid={`button-view-${team.id}`}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1\" />\n                              Details\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </>\n            )}\n          </CardContent>\n        </Card>\n\n        <Dialog open={!!selectedTeam} onOpenChange={() => setSelectedTeam(null)}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Team Details</DialogTitle>\n            </DialogHeader>\n            {selectedTeam && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Team Name</p>\n                    <p className=\"font-semibold\">{selectedTeam.teamName}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Game Type</p>\n                    <Badge variant=\"outline\">{selectedTeam.gameType.toUpperCase()}</Badge>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                    <Badge className={getStatusColor(selectedTeam.status)}>\n                      {selectedTeam.status}\n                    </Badge>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">YouTube Live Stream</p>\n                    <Badge variant={selectedTeam.youtubeVote === 'yes' ? 'default' : 'secondary'}>\n                      {selectedTeam.youtubeVote === 'yes' ? 'Yes' : 'No'}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-semibold mb-2\">Team Members</h4>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Leader</p>\n                      <p>{selectedTeam.leaderName} • {selectedTeam.leaderWhatsapp}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedTeam.gameType === 'pubg' ? 'PUBG ID' : 'Free Fire UID'}: {selectedTeam.leaderPlayerId}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Player 2</p>\n                      <p>{selectedTeam.player2Name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedTeam.gameType === 'pubg' ? 'PUBG ID' : 'Free Fire UID'}: {selectedTeam.player2PlayerId}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Player 3</p>\n                      <p>{selectedTeam.player3Name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedTeam.gameType === 'pubg' ? 'PUBG ID' : 'Free Fire UID'}: {selectedTeam.player3PlayerId}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Player 4</p>\n                      <p>{selectedTeam.player4Name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedTeam.gameType === 'pubg' ? 'PUBG ID' : 'Free Fire UID'}: {selectedTeam.player4PlayerId}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-semibold mb-2\">Payment Information</h4>\n                  <p className=\"text-sm mb-2\">Transaction ID: {selectedTeam.transactionId}</p>\n                  {selectedTeam.paymentScreenshot && (\n                    <img\n                      src={selectedTeam.paymentScreenshot}\n                      alt=\"Payment Screenshot\"\n                      className=\"max-w-full h-auto rounded-lg border\"\n                    />\n                  )}\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-semibold mb-2\">Admin Notes</h4>\n                  <Textarea\n                    value={adminNotes}\n                    onChange={(e) => setAdminNotes(e.target.value)}\n                    placeholder=\"Add notes about this team...\"\n                    className=\"min-h-24\"\n                    data-testid=\"textarea-admin-notes\"\n                  />\n                  <Button\n                    onClick={handleSaveNotes}\n                    disabled={updateNotesMutation.isPending}\n                    className=\"mt-2\"\n                    size=\"sm\"\n                    data-testid=\"button-save-notes\"\n                  >\n                    {updateNotesMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : (\n                      'Save Notes'\n                    )}\n                  </Button>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    onClick={() => updateStatusMutation.mutate({ id: selectedTeam.id, status: \"approved\" })}\n                    disabled={updateStatusMutation.isPending || selectedTeam.status === \"approved\"}\n                    className=\"flex-1\"\n                    data-testid=\"button-approve\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Approve\n                  </Button>\n                  <Button\n                    onClick={() => updateStatusMutation.mutate({ id: selectedTeam.id, status: \"rejected\" })}\n                    disabled={updateStatusMutation.isPending || selectedTeam.status === \"rejected\"}\n                    variant=\"destructive\"\n                    className=\"flex-1\"\n                    data-testid=\"button-reject\"\n                  >\n                    <XCircle className=\"w-4 h-4 mr-2\" />\n                    Reject\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":30214},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"DEPLOYMENT.md":{"content":"# Deployment Guide\n\n## ⚠️ Why Vercel Won't Work for This Application\n\nYour gaming tournament platform **cannot be deployed to Vercel** due to these fundamental technical limitations:\n\n### 1. WebSocket Support ❌\n- **Issue**: Vercel serverless functions do not support WebSocket connections\n- **Your app uses**: `ws` package for real-time communication\n- **Impact**: WebSocket connections will fail immediately on Vercel\n\n### 2. Express Sessions ❌\n- **Issue**: Serverless functions are stateless - each request may hit a different server instance\n- **Your app uses**: `express-session` with in-memory storage\n- **Impact**: Users will be logged out randomly, sessions won't persist\n\n### 3. Long-Running Server ❌\n- **Issue**: Vercel functions timeout after 10-60 seconds\n- **Your app needs**: Persistent Express server running continuously\n- **Impact**: Server will be terminated mid-request\n\n### 4. Database Connections ❌\n- **Issue**: Serverless requires connection pooling or serverless-compatible DB\n- **Your app uses**: Standard PostgreSQL with persistent connections\n- **Impact**: Too many database connections, connection errors\n\n---\n\n## ✅ Recommended Deployment Platforms\n\n### Option 1: Replit Publishing (Recommended) ⭐\n**Best for your needs - designed for full-stack apps**\n\n**Pros:**\n- ✅ Supports WebSockets\n- ✅ Works with Express sessions\n- ✅ PostgreSQL database included\n- ✅ No code changes needed\n- ✅ Automatic HTTPS\n- ✅ Free tier available\n\n**How to Deploy:**\n1. Click the \"Deploy\" button in Replit\n2. Configure your domain (optional)\n3. Set environment variables\n4. Click \"Deploy\"\n5. Done! ✨\n\n**Cost**: Free tier available, paid plans from $7/month\n**Link**: https://replit.com/pricing\n\n⚠️ **Note**: Payment screenshots are stored as base64 in database, so no additional file storage needed.\n\n---\n\n### Option 2: Railway 🚂\n**Great for full-stack Node.js apps**\n\n**Pros:**\n- ✅ Full WebSocket support\n- ✅ PostgreSQL included\n- ✅ Easy deployment from GitHub\n- ✅ Auto-scaling\n- ✅ $5 free credit monthly\n\n**How to Deploy:**\n1. Push code to GitHub\n2. Connect Railway to your repo\n3. Add PostgreSQL database\n4. Set environment variables\n5. Railway auto-deploys\n\n**Cost**: $5/month minimum, usage-based pricing\n**Link**: https://railway.app/pricing\n\n⚠️ **Important for multi-instance deployment**: Update session store to use PostgreSQL:\n```bash\nnpm install connect-pg-simple\n```\n\nThen in `server/index.ts`:\n```javascript\nimport connectPgSimple from 'connect-pg-simple';\nconst PgSession = connectPgSimple(session);\n\napp.use(session({\n  store: new PgSession({\n    pool: pool,\n    createTableIfMissing: true\n  }),\n  // ... rest of session config\n}));\n```\n\n**Setup:**\n```bash\n# Add to package.json\n\"scripts\": {\n  \"start\": \"NODE_ENV=production node dist/index.js\",\n  \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\"\n}\n```\n\n---\n\n### Option 3: Render 🎨\n**Reliable platform with free tier**\n\n**Pros:**\n- ✅ WebSocket support\n- ✅ Free PostgreSQL (90 days)\n- ✅ Auto SSL certificates\n- ✅ GitHub auto-deploy\n\n**How to Deploy:**\n1. Create account on render.com\n2. New Web Service → Connect GitHub repo\n3. Build Command: `npm run build`\n4. Start Command: `npm start`\n5. Add PostgreSQL database\n6. Set environment variables\n\n**Cost**: Free tier (with limitations), paid from $7/month\n**Link**: https://render.com/pricing\n\n⚠️ **Session Store**: Same as Railway - use `connect-pg-simple` for persistent sessions.\n\n---\n\n### Option 4: Fly.io 🪰\n**Global edge deployment**\n\n**Pros:**\n- ✅ WebSocket support\n- ✅ Global distribution\n- ✅ Docker-based (flexible)\n- ✅ Built-in PostgreSQL\n\n**Cost**: Free tier (limited), usage-based\n**Link**: https://fly.io/docs/about/pricing\n\n⚠️ **Session Store**: Same as Railway - use `connect-pg-simple` for persistent sessions.\n\n---\n\n## 🚫 Why Not Vercel?\n\n**Vercel is designed for:**\n- ✅ Static sites (React, Next.js)\n- ✅ Serverless API functions (short-lived)\n- ✅ JAMstack applications\n- ✅ Edge functions\n\n**Vercel is NOT designed for:**\n- ❌ WebSocket servers\n- ❌ Long-running Express apps\n- ❌ Stateful applications\n- ❌ Traditional backend servers\n\n---\n\n## 🎯 Best Choice for Your Tournament Platform\n\n**Use Replit Publishing** because:\n\n1. **Zero Code Changes**: Your app works as-is\n2. **Built-in Database**: PostgreSQL already configured\n3. **WebSocket Support**: Full support for real-time features\n4. **Easy Management**: All in one dashboard\n5. **Quick Deployment**: One-click deploy\n6. **Cost-Effective**: Free tier available\n\n---\n\n## 📋 Pre-Deployment Checklist\n\nBefore deploying to any platform:\n\n- [ ] Set `NODE_ENV=production` in environment variables\n- [ ] Set `DATABASE_URL` to your production database\n- [ ] Change admin password from default\n- [ ] Test payment flow\n- [ ] Verify all forms work\n- [ ] Test mobile responsiveness\n- [ ] Check HTTPS redirects\n- [ ] Set session secret: `SESSION_SECRET=your-random-secret`\n- [ ] Configure CORS if frontend is separate domain\n- [ ] Test file uploads (payment screenshots)\n\n---\n\n## 🔐 Environment Variables Needed\n\n```bash\n# Required\nDATABASE_URL=postgresql://user:pass@host:port/db\nSESSION_SECRET=your-very-random-secret-key-here\nNODE_ENV=production\n\n# Optional\nPORT=5000\n```\n\n---\n\n## 📱 Current Deployment Status\n\n✅ **Running on Replit**: Application is currently live and working\n- URL: Your Replit URL\n- Database: PostgreSQL (Replit)\n- All features functional\n\n---\n\n## 💡 Alternative Architecture for Vercel (Not Recommended)\n\nIf you absolutely must use Vercel, you would need to:\n\n1. **Split the application**:\n   - Frontend → Vercel\n   - Backend → Railway/Render/Fly.io\n\n2. **Replace WebSockets** with:\n   - Pusher/Ably (third-party service)\n   - Server-Sent Events (SSE)\n   - Long polling\n\n3. **Update sessions**:\n   - Use JWT tokens instead of sessions\n   - Or use external session store (Redis/MongoDB)\n\n4. **Restructure backend**:\n   - Convert to serverless functions\n   - Add connection pooling\n   - Handle cold starts\n\n**Estimated effort**: 20-30 hours of refactoring\n**Recommended**: Use a proper platform instead ✨\n\n---\n\n**Last Updated**: October 19, 2025\n**Recommendation**: Deploy to Replit Publishing or Railway\n","size_bytes":6292},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/lib/imageCompression.ts":{"content":"export async function compressImage(file: File, maxSizeMB: number = 0.5): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = (event) => {\n      const img = new Image();\n      img.src = event.target?.result as string;\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        let width = img.width;\n        let height = img.height;\n        \n        const maxDimension = 1200;\n        if (width > height && width > maxDimension) {\n          height = (height / width) * maxDimension;\n          width = maxDimension;\n        } else if (height > maxDimension) {\n          width = (width / height) * maxDimension;\n          height = maxDimension;\n        }\n        \n        canvas.width = width;\n        canvas.height = height;\n        \n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          reject(new Error('Could not get canvas context'));\n          return;\n        }\n        \n        ctx.drawImage(img, 0, 0, width, height);\n        \n        let quality = 0.7;\n        let compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n        \n        const targetSizeBytes = maxSizeMB * 1024 * 1024;\n        while (compressedDataUrl.length > targetSizeBytes && quality > 0.1) {\n          quality -= 0.1;\n          compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n        }\n        \n        resolve(compressedDataUrl);\n      };\n      img.onerror = () => reject(new Error('Failed to load image'));\n    };\n    reader.onerror = () => reject(new Error('Failed to read file'));\n  });\n}\n","size_bytes":1644},"client/src/components/tournament/prize-pool.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Trophy, Medal, Crown, Sparkles } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface PrizePoolProps {\n  config: {\n    PRIZE_WINNER: number;\n    PRIZE_RUNNER_UP: number;\n  };\n}\n\nexport function PrizePool({ config }: PrizePoolProps) {\n  return (\n    <section className=\"relative py-12 sm:py-16 md:py-20 lg:py-32 overflow-hidden\" data-aos=\"fade-up\">\n      {/* Animated Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-chart-4/5 to-chart-2/5\"></div>\n      <div className=\"absolute inset-0 bg-secondary/40 backdrop-blur-3xl\"></div>\n      \n      {/* Floating Orbs - Responsive */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute top-5 sm:top-10 left-5 sm:left-20 w-32 h-32 sm:w-48 sm:h-48 md:w-64 md:h-64 bg-chart-4/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-10 sm:bottom-20 right-5 sm:right-20 w-40 h-40 sm:w-56 sm:h-56 md:w-72 md:h-72 bg-primary/20 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n      </div>\n\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        <motion.div \n          className=\"text-center mb-10 sm:mb-12 md:mb-16\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true, margin: \"-100px\" }}\n          transition={{ duration: 0.6 }}\n          data-aos=\"fade-down\"\n        >\n          <div className=\"flex items-center justify-center gap-2 mb-3 sm:mb-4\">\n            <Sparkles className=\"w-5 h-5 sm:w-6 sm:h-6 text-chart-4 animate-pulse\" />\n            <h2 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-display font-extrabold\" data-testid=\"text-section-prize-pool\">\n              Prize Pool\n            </h2>\n            <Sparkles className=\"w-5 h-5 sm:w-6 sm:h-6 text-chart-4 animate-pulse\" />\n          </div>\n          <p className=\"text-foreground/80 text-base sm:text-lg md:text-xl font-medium px-4\">\n            Compete for amazing cash prizes!\n          </p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 sm:gap-8 max-w-5xl mx-auto px-4\">\n          {/* Winner */}\n          <motion.div\n            initial={{ opacity: 0, x: -50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            viewport={{ once: true, margin: \"-100px\" }}\n            transition={{ duration: 0.7 }}\n          >\n            <Card className=\"p-10 text-center relative overflow-hidden group hover-elevate transition-all duration-500 hover:scale-105 hover:shadow-2xl\" data-testid=\"card-prize-winner\">\n              <div className=\"absolute top-0 right-0 w-40 h-40 bg-chart-4/30 rounded-full blur-3xl -mr-20 -mt-20 group-hover:scale-150 transition-transform duration-700\"></div>\n              <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-primary/20 rounded-full blur-3xl group-hover:scale-150 transition-transform duration-700\"></div>\n              <div className=\"relative\">\n                <div className=\"inline-flex p-6 rounded-full bg-chart-4/20 mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Crown className=\"w-16 h-16 text-chart-4\" />\n                </div>\n                <h3 className=\"text-3xl font-display font-bold mb-3\">Winner</h3>\n                <p className=\"text-6xl md:text-7xl font-display font-extrabold gradient-text mb-3 group-hover:scale-110 transition-transform duration-300\">\n                  ₹{config.PRIZE_WINNER}\n                </p>\n                <p className=\"text-foreground/70 text-lg font-semibold\">1st Place Prize</p>\n              </div>\n            </Card>\n          </motion.div>\n\n          {/* Runner Up */}\n          <motion.div\n            initial={{ opacity: 0, x: 50 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            viewport={{ once: true, margin: \"-100px\" }}\n            transition={{ duration: 0.7 }}\n          >\n            <Card className=\"p-10 text-center relative overflow-hidden group hover-elevate transition-all duration-500 hover:scale-105 hover:shadow-2xl\" data-testid=\"card-prize-runner-up\">\n              <div className=\"absolute top-0 right-0 w-40 h-40 bg-chart-2/30 rounded-full blur-3xl -mr-20 -mt-20 group-hover:scale-150 transition-transform duration-700\"></div>\n              <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-chart-1/20 rounded-full blur-3xl group-hover:scale-150 transition-transform duration-700\"></div>\n              <div className=\"relative\">\n                <div className=\"inline-flex p-6 rounded-full bg-chart-2/20 mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Medal className=\"w-16 h-16 text-chart-2\" />\n                </div>\n                <h3 className=\"text-3xl font-display font-bold mb-3\">Runner-up</h3>\n                <p className=\"text-6xl md:text-7xl font-display font-extrabold gradient-text mb-3 group-hover:scale-110 transition-transform duration-300\">\n                  ₹{config.PRIZE_RUNNER_UP}\n                </p>\n                <p className=\"text-foreground/70 text-lg font-semibold\">2nd Place Prize</p>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        <motion.div \n          className=\"mt-12 text-center\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true, margin: \"-100px\" }}\n          transition={{ duration: 0.6, delay: 0.3 }}\n        >\n          <p className=\"text-base text-foreground/70 font-medium flex items-center justify-center gap-2\">\n            <Trophy className=\"w-5 h-5 text-chart-4\" />\n            Prize money will be transferred via UPI/Paytm/PhonePe after verification\n          </p>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5878},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"VERCEL_DEPLOYMENT_GUIDE.md":{"content":"# Complete Vercel Deployment Guide\n\n## ⚠️ Important: Your App Requires Major Changes for Vercel\n\nYour tournament platform needs significant restructuring to work on Vercel. Here's the complete step-by-step guide:\n\n---\n\n## 📋 What Needs to Change\n\n### 1. Replace WebSockets with Pusher (Required)\n\n**Current Problem**: Your app uses `ws` package for WebSockets. Vercel doesn't support persistent WebSocket connections.\n\n**Solution**: Sign up for Pusher (free tier: 100 concurrent connections)\n\n**Steps**:\n\n1. **Sign up at Pusher**: https://pusher.com/\n2. **Get your credentials** from Pusher dashboard\n3. **Add environment variables** in Vercel:\n   ```\n   PUSHER_APP_ID=your_app_id\n   PUSHER_KEY=your_key\n   PUSHER_SECRET=your_secret\n   PUSHER_CLUSTER=ap2\n   ```\n\n4. **Install Pusher packages** (already installed):\n   - `pusher` (server-side)\n   - `pusher-js` (client-side)\n\n---\n\n### 2. Replace Express Sessions with JWT (Required)\n\n**Current Problem**: `express-session` with memory store doesn't work on serverless.\n\n**Solution**: Use JWT tokens stored in HTTP-only cookies\n\n**Implementation**: See the code changes in the next section.\n\n---\n\n### 3. Create Serverless API Structure\n\n**Current Problem**: Single Express server file doesn't work with Vercel's serverless model.\n\n**Solution**: Split routes into serverless functions.\n\n---\n\n## 🔨 Required Code Changes\n\n### Step 1: Create `api/index.ts` (Main API Entry Point)\n\nCreate new file: `api/index.ts`\n\n```typescript\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\nconst app = express();\n\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\n\n// CORS for Vercel\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  if (req.method === 'OPTIONS') {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\n// Register all API routes\nregisterRoutes(app);\n\n// Export for Vercel\nexport default app;\n```\n\n---\n\n### Step 2: Create `vercel.json`\n\nCreate new file in project root: `vercel.json`\n\n```json\n{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"client/package.json\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"dist/public\"\n      }\n    },\n    {\n      \"src\": \"api/index.ts\",\n      \"use\": \"@vercel/node\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/api/(.*)\",\n      \"dest\": \"/api/index.ts\"\n    },\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/dist/public/$1\"\n    }\n  ],\n  \"env\": {\n    \"DATABASE_URL\": \"@database_url\",\n    \"NODE_ENV\": \"production\",\n    \"SESSION_SECRET\": \"@session_secret\",\n    \"PUSHER_APP_ID\": \"@pusher_app_id\",\n    \"PUSHER_KEY\": \"@pusher_key\",\n    \"PUSHER_SECRET\": \"@pusher_secret\",\n    \"PUSHER_CLUSTER\": \"@pusher_cluster\"\n  }\n}\n```\n\n---\n\n### Step 3: Update Authentication to Use JWT\n\n**Modify `server/routes.ts`** - Replace session-based auth:\n\n```typescript\nimport jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key-change-this';\n\n// Replace session middleware with JWT\nfunction requireAuth(req: any, res: any, next: any) {\n  const token = req.cookies?.token || req.headers.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    req.admin = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n}\n\n// Update login endpoint\napp.post(\"/api/admin/login\", async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    const admin = await storage.getAdminByUsername(username);\n    \n    if (!admin) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const isValid = await bcrypt.compare(password, admin.password);\n    \n    if (!isValid) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Create JWT token\n    const token = jwt.sign(\n      { id: admin.id, username: admin.username },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    // Send token in HTTP-only cookie\n    res.cookie('token', token, {\n      httpOnly: true,\n      secure: true,\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 days\n    });\n\n    res.json({ message: \"Login successful\", username: admin.username });\n  } catch (error: any) {\n    res.status(500).json({ message: error.message });\n  }\n});\n```\n\n---\n\n### Step 4: Update Database for Serverless\n\n**Modify `server/db.ts`** - Use connection pooling:\n\n```typescript\nimport { neonConfig } from \"@neondatabase/serverless\";\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\n// IMPORTANT: Always use Neon serverless for Vercel\nconst dbUrl = process.env.DATABASE_URL;\n\nif (!dbUrl) {\n  throw new Error(\"DATABASE_URL is required\");\n}\n\n// Use serverless-compatible connection\nconst pool = new NeonPool({ \n  connectionString: dbUrl,\n  max: 1, // Vercel serverless: 1 connection per function\n});\n\nconst db = drizzleNeon({ client: pool, schema: schema_exports });\n\nexport { db, pool };\n```\n\n---\n\n### Step 5: Add Pusher for Real-Time Updates\n\n**Create `server/pusher.ts`**:\n\n```typescript\nimport Pusher from 'pusher';\n\nexport const pusher = new Pusher({\n  appId: process.env.PUSHER_APP_ID!,\n  key: process.env.PUSHER_KEY!,\n  secret: process.env.PUSHER_SECRET!,\n  cluster: process.env.PUSHER_CLUSTER || 'ap2',\n  useTLS: true\n});\n\n// Trigger event when team registers\nexport async function notifyTeamRegistration(gameType: string) {\n  await pusher.trigger('tournament', 'team-registered', {\n    gameType,\n    timestamp: new Date().toISOString()\n  });\n}\n```\n\n**Update `client/src/lib/pusher.ts`**:\n\n```typescript\nimport Pusher from 'pusher-js';\n\nexport const pusher = new Pusher(import.meta.env.VITE_PUSHER_KEY || '', {\n  cluster: import.meta.env.VITE_PUSHER_CLUSTER || 'ap2',\n});\n\nexport const tournamentChannel = pusher.subscribe('tournament');\n```\n\n**Update registration form** to use Pusher:\n\n```typescript\n// In client/src/components/tournament/slot-counter.tsx\nimport { tournamentChannel } from '@/lib/pusher';\n\nuseEffect(() => {\n  tournamentChannel.bind('team-registered', () => {\n    queryClient.invalidateQueries({ queryKey: [`/api/teams/count/${gameType}`] });\n  });\n  \n  return () => {\n    tournamentChannel.unbind('team-registered');\n  };\n}, [gameType]);\n```\n\n---\n\n### Step 6: Update package.json Scripts\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build\",\n    \"vercel-build\": \"npm run build\",\n    \"start\": \"node api/index.js\"\n  }\n}\n```\n\n---\n\n### Step 7: Add Environment Variables in Vercel Dashboard\n\nAfter deploying, add these in Vercel Dashboard → Settings → Environment Variables:\n\n```\nDATABASE_URL=postgresql://your-neon-db-url\nSESSION_SECRET=your-random-secret-minimum-32-characters\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_KEY=your-pusher-key\nPUSHER_SECRET=your-pusher-secret\nPUSHER_CLUSTER=ap2\nNODE_ENV=production\n```\n\nFor frontend (VITE variables):\n```\nVITE_PUSHER_KEY=your-pusher-key\nVITE_PUSHER_CLUSTER=ap2\n```\n\n---\n\n## 🚀 Deployment Steps\n\n### 1. Push to GitHub\n\n```bash\ngit add .\ngit commit -m \"Prepare for Vercel deployment\"\ngit push origin main\n```\n\n### 2. Deploy to Vercel\n\n1. Go to https://vercel.com\n2. Click \"New Project\"\n3. Import your GitHub repository\n4. Vercel auto-detects settings\n5. Add environment variables (see Step 7 above)\n6. Click \"Deploy\"\n\n### 3. After First Deploy\n\n1. Go to Vercel Dashboard → Settings → Environment Variables\n2. Add all required variables\n3. Click \"Redeploy\" from Deployments tab\n\n---\n\n## ✅ Testing Checklist\n\nAfter deployment:\n\n- [ ] Homepage loads\n- [ ] Forms are responsive on mobile\n- [ ] Team registration works\n- [ ] Admin login works (JWT)\n- [ ] Real-time slot counter updates (Pusher)\n- [ ] Payment screenshot upload works\n- [ ] Admin dashboard loads\n- [ ] Excel export works\n\n---\n\n## 🐛 Common Vercel Errors & Fixes\n\n### Error: \"Function execution timeout\"\n**Fix**: Reduce database queries, add indexes, use caching\n\n### Error: \"WebSocket connection failed\"\n**Fix**: You're still using `ws` package - switch to Pusher completely\n\n### Error: \"Module not found\"\n**Fix**: Check `package.json` includes all dependencies\n\n### Error: \"Database connection pool exhausted\"\n**Fix**: Set `max: 1` in Neon connection config\n\n### Error: \"CORS policy blocked\"\n**Fix**: Add proper CORS headers in `api/index.ts`\n\n---\n\n## 💰 Cost Estimate\n\n**Vercel**:\n- Free tier: Good for testing\n- Pro: $20/month (recommended for production)\n\n**Pusher**:\n- Free tier: 100 concurrent connections, 200k messages/day\n- Paid: $49/month for more\n\n**Neon (Database)**:\n- Free tier: 0.5 GB storage, 192 hours compute/month\n- Paid: $19/month for more\n\n**Total estimated cost**: $0-$88/month depending on traffic\n\n---\n\n## 🔄 Alternative: Stay on Replit\n\nIf Vercel costs are too high or changes are too complex:\n\n**Replit Publishing**:\n- ✅ No code changes needed\n- ✅ WebSockets work\n- ✅ Sessions work\n- ✅ Database included\n- ✅ One-click deployment\n- 💰 $7/month\n\n**To deploy on Replit**: Click the \"Deploy\" button → Configure → Deploy\n\n---\n\n## 📞 Support\n\nIf you get stuck:\n1. Check Vercel logs in Dashboard → Deployments → [Your deployment] → Logs\n2. Check browser console for frontend errors\n3. Verify all environment variables are set correctly\n\n---\n\n**Last Updated**: October 19, 2025\n**Estimated Implementation Time**: 6-8 hours\n**Difficulty**: Advanced\n","size_bytes":9628},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/ensure-db.ts":{"content":"import { execSync, exec } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nconst POSTGRES_DIR = path.join(process.env.HOME || '/home/runner', '.postgresql', 'data');\nconst SOCKET_DIR = '/tmp';\nconst PORT = '5433';\nconst LOG_FILE = path.join(POSTGRES_DIR, 'logfile');\n\nasync function isPostgresRunning(): Promise<boolean> {\n  try {\n    await execAsync(`pg_isready -h ${SOCKET_DIR} -p ${PORT}`, { timeout: 5000 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function ensureDatabase() {\n  if (process.env.DATABASE_URL && process.env.DATABASE_URL.trim() !== '') {\n    console.log(\"✅ DATABASE_URL is set, using cloud database (Neon PostgreSQL)\");\n    console.log(\"📊 This ensures data persistence and real-time sync across all users\");\n    return;\n  }\n\n  console.log(\"⚠️  DATABASE_URL not set. Setting up local PostgreSQL for development...\");\n  console.log(\"📝 NOTE: For production deployment, you MUST set DATABASE_URL to a cloud database\");\n  console.log(\"📝 This local database is only for development and data will NOT sync across users\");\n\n  try {\n    const needsInit = !fs.existsSync(path.join(POSTGRES_DIR, 'PG_VERSION'));\n    \n    if (needsInit) {\n      console.log(\"📊 Initializing PostgreSQL data directory...\");\n      \n      if (fs.existsSync(POSTGRES_DIR)) {\n        console.log(\"🗑️  Cleaning up corrupted PostgreSQL directory...\");\n        fs.rmSync(POSTGRES_DIR, { recursive: true, force: true });\n      }\n      \n      fs.mkdirSync(POSTGRES_DIR, { recursive: true });\n      \n      try {\n        const cleanEnv = { ...process.env };\n        delete cleanEnv.PGPORT;\n        delete cleanEnv.PGHOST;\n        delete cleanEnv.PGUSER;\n        delete cleanEnv.PGPASSWORD;\n        delete cleanEnv.PGDATABASE;\n        \n        execSync(`initdb -D ${POSTGRES_DIR} --auth=trust --no-locale --encoding=UTF8`, {\n          stdio: 'pipe',\n          env: cleanEnv\n        });\n        console.log(\"✅ PostgreSQL initialized\");\n      } catch (error: any) {\n        console.error(\"❌ Failed to initialize PostgreSQL:\", error.message);\n        throw error;\n      }\n    } else {\n      console.log(\"ℹ️  PostgreSQL data directory already exists\");\n    }\n\n    const isRunning = await isPostgresRunning();\n    \n    if (!isRunning) {\n      console.log(\"🚀 Starting PostgreSQL server...\");\n      \n      try {\n        const cleanEnv = { ...process.env };\n        delete cleanEnv.PGPORT;\n        delete cleanEnv.PGHOST;\n        delete cleanEnv.PGUSER;\n        delete cleanEnv.PGPASSWORD;\n        delete cleanEnv.PGDATABASE;\n        \n        execSync(\n          `pg_ctl -D ${POSTGRES_DIR} -o \"-p ${PORT} -k ${SOCKET_DIR}\" -l ${LOG_FILE} start`,\n          { stdio: 'pipe', timeout: 15000, env: cleanEnv }\n        );\n        \n        console.log(\"⏳ Waiting for PostgreSQL to be ready...\");\n        for (let i = 0; i < 10; i++) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          if (await isPostgresRunning()) {\n            console.log(\"✅ PostgreSQL is ready\");\n            break;\n          }\n        }\n        \n        const finalCheck = await isPostgresRunning();\n        if (!finalCheck) {\n          if (fs.existsSync(LOG_FILE)) {\n            const logs = fs.readFileSync(LOG_FILE, 'utf-8');\n            console.error(\"PostgreSQL logs:\", logs.slice(-500));\n          }\n          throw new Error(\"PostgreSQL started but is not responding\");\n        }\n      } catch (error: any) {\n        console.error(\"❌ Failed to start PostgreSQL:\", error.message);\n        throw error;\n      }\n    } else {\n      console.log(\"✅ PostgreSQL is already running\");\n    }\n\n    try {\n      execSync(`createdb -h ${SOCKET_DIR} -p ${PORT} replit_db 2>&1`, {\n        stdio: 'pipe'\n      });\n      console.log(\"✅ Database 'replit_db' created\");\n    } catch (error: any) {\n      if (!error.message.includes('already exists')) {\n        console.log(\"ℹ️  Database 'replit_db' might already exist\");\n      }\n    }\n\n    const localDatabaseUrl = `postgresql://runner@localhost:${PORT}/replit_db?host=${SOCKET_DIR}`;\n    process.env.DATABASE_URL = localDatabaseUrl;\n    \n    console.log(\"✅ DATABASE_URL set to local PostgreSQL (development only)\");\n  } catch (error: any) {\n    console.error(\"❌ Failed to setup local database:\", error.message);\n    throw new Error(`Database setup failed: ${error.message}`);\n  }\n}\n","size_bytes":4449},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/init-db.ts":{"content":"import { sql } from 'drizzle-orm';\nimport bcrypt from 'bcryptjs';\nimport { db } from './db';\n\nexport async function initializeDatabase() {\n  try {\n    console.log(\"🔧 Initializing database...\");\n\n    console.log(\"📊 Creating admin_users table...\");\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS admin_users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(50) NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        created_at TIMESTAMP NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    console.log(\"📊 Creating teams table...\");\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS teams (\n        id VARCHAR PRIMARY KEY,\n        team_name TEXT NOT NULL,\n        leader_name TEXT NOT NULL,\n        leader_whatsapp TEXT NOT NULL,\n        leader_player_id TEXT NOT NULL,\n        player2_name TEXT NOT NULL,\n        player2_player_id TEXT NOT NULL,\n        player3_name TEXT NOT NULL,\n        player3_player_id TEXT NOT NULL,\n        player4_name TEXT NOT NULL,\n        player4_player_id TEXT NOT NULL,\n        transaction_id TEXT NOT NULL,\n        payment_screenshot TEXT NOT NULL,\n        game_type TEXT NOT NULL DEFAULT 'pubg',\n        youtube_vote TEXT NOT NULL DEFAULT 'no',\n        agreed_to_terms INTEGER NOT NULL DEFAULT 1,\n        status TEXT NOT NULL DEFAULT 'pending',\n        admin_notes TEXT,\n        updated_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        created_at TIMESTAMP NOT NULL DEFAULT NOW()\n      )\n    `);\n\n    console.log(\"📊 Migrating existing teams table...\");\n    try {\n      await db.execute(sql`ALTER TABLE teams ADD COLUMN IF NOT EXISTS game_type TEXT NOT NULL DEFAULT 'pubg'`);\n      \n      // Check if youtube_vote column exists and its type\n      const youtubeVoteCheck = await db.execute(sql`\n        SELECT data_type \n        FROM information_schema.columns \n        WHERE table_name = 'teams' AND column_name = 'youtube_vote'\n      `);\n      \n      if (youtubeVoteCheck.rows.length > 0) {\n        const dataType = youtubeVoteCheck.rows[0].data_type;\n        if (dataType === 'integer') {\n          console.log(\"📊 Converting youtube_vote from INTEGER to TEXT...\");\n          // Drop default and convert\n          await db.execute(sql`ALTER TABLE teams ALTER COLUMN youtube_vote DROP DEFAULT`);\n          await db.execute(sql`ALTER TABLE teams ALTER COLUMN youtube_vote TYPE TEXT USING CASE WHEN youtube_vote = 0 THEN 'no' ELSE 'yes' END`);\n          await db.execute(sql`ALTER TABLE teams ALTER COLUMN youtube_vote SET DEFAULT 'no'`);\n          console.log(\"✅ youtube_vote column converted to TEXT\");\n        }\n      } else {\n        await db.execute(sql`ALTER TABLE teams ADD COLUMN IF NOT EXISTS youtube_vote TEXT NOT NULL DEFAULT 'no'`);\n      }\n      \n      const columnsResult = await db.execute(sql`\n        SELECT column_name \n        FROM information_schema.columns \n        WHERE table_name = 'teams' AND column_name LIKE '%pubg_id'\n      `);\n      \n      if (columnsResult.rows.length > 0) {\n        console.log(\"📊 Renaming pubg_id columns to player_id...\");\n        await db.execute(sql`ALTER TABLE teams RENAME COLUMN leader_pubg_id TO leader_player_id`);\n        await db.execute(sql`ALTER TABLE teams RENAME COLUMN player2_pubg_id TO player2_player_id`);\n        await db.execute(sql`ALTER TABLE teams RENAME COLUMN player3_pubg_id TO player3_player_id`);\n        await db.execute(sql`ALTER TABLE teams RENAME COLUMN player4_pubg_id TO player4_player_id`);\n        console.log(\"✅ Columns renamed successfully!\");\n      }\n    } catch (error: any) {\n      if (!error.message.includes('already exists') && !error.message.includes('does not exist')) {\n        console.error(\"⚠️  Migration warning:\", error.message);\n      }\n    }\n\n    const existingAdminResult = await db.execute(sql`SELECT COUNT(*) as count FROM admin_users`);\n    const adminCount = Number(existingAdminResult.rows[0]?.count || 0);\n    \n    if (adminCount === 0) {\n      console.log(\"👤 Creating default admin user...\");\n      const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n      \n      await db.execute(sql`\n        INSERT INTO admin_users (username, password)\n        VALUES ('admin', ${hashedPassword})\n      `);\n      \n      console.log(\"✅ Default admin created!\");\n      console.log(\"📝 Username: admin\");\n      console.log(\"📝 Password: admin123\");\n      console.log(\"⚠️  IMPORTANT: Change this password after first login!\");\n    } else {\n      console.log(\"✅ Admin user already exists\");\n    }\n\n    console.log(\"✅ Database initialized successfully!\");\n  } catch (error) {\n    console.error(\"❌ Database initialization failed:\", error);\n    throw error;\n  }\n}\n","size_bytes":4649},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { ensureDatabase } from \"./ensure-db\";\nimport { initializeDatabase } from \"./init-db\";\n\nconst app = express();\napp.use(express.json({ limit: \"50mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  await ensureDatabase();\n  await initializeDatabase();\n  \n  await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  const server = createServer(app);\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2310},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Trophy, Gamepad2, Menu, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <nav \n      className={`sticky top-0 z-50 w-full transition-all duration-300 ${\n        isScrolled \n          ? 'bg-background/80 backdrop-blur-xl border-b border-border/50 shadow-lg' \n          : 'bg-background/60 backdrop-blur-md border-b border-border/30'\n      }`}\n      data-aos=\"fade-down\"\n      data-aos-duration=\"600\"\n    >\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 md:h-20 items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2 sm:gap-3 group cursor-pointer\">\n            <Trophy className=\"w-6 h-6 sm:w-7 sm:h-7 text-primary transition-transform duration-300 group-hover:scale-110 group-hover:rotate-12\" />\n            <span className=\"text-lg sm:text-xl md:text-2xl font-display font-bold bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n              Tournament Arena\n            </span>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-2 lg:gap-3\">\n            <Link href=\"/pubg\">\n              <Button\n                variant={location === \"/pubg\" || location === \"/\" ? \"default\" : \"ghost\"}\n                className=\"gap-2 transition-all duration-300 btn-hover-lift\"\n                data-testid=\"link-pubg-tournament\"\n              >\n                <Gamepad2 className=\"w-4 h-4\" />\n                <span className=\"hidden lg:inline\">PUBG Mobile</span>\n                <span className=\"lg:hidden\">PUBG</span>\n              </Button>\n            </Link>\n            \n            <Link href=\"/free-fire\">\n              <Button\n                variant={location === \"/free-fire\" ? \"default\" : \"ghost\"}\n                className=\"gap-2 transition-all duration-300 btn-hover-lift\"\n                data-testid=\"link-freefire-tournament\"\n              >\n                <Gamepad2 className=\"w-4 h-4\" />\n                <span className=\"hidden lg:inline\">Free Fire</span>\n                <span className=\"lg:hidden\">FF</span>\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n          >\n            {isMobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div \n            className=\"md:hidden py-4 space-y-2 animate-in slide-in-from-top-2 duration-300\"\n            data-aos=\"fade-down\"\n          >\n            <Link href=\"/pubg\">\n              <Button\n                variant={location === \"/pubg\" || location === \"/\" ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start gap-3 text-base\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <Gamepad2 className=\"w-5 h-5\" />\n                PUBG Mobile Tournament\n              </Button>\n            </Link>\n            \n            <Link href=\"/free-fire\">\n              <Button\n                variant={location === \"/free-fire\" ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start gap-3 text-base\"\n                onClick={() => setIsMobileMenuOpen(false)}\n              >\n                <Gamepad2 className=\"w-5 h-5\" />\n                Free Fire Tournament\n              </Button>\n            </Link>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4185},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"shared/schema.ts":{"content":"import { pgTable, text, varchar, integer, timestamp, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Admin Users Schema\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Tournament Team Registration Schema\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey(),\n  gameType: text(\"game_type\").notNull().default(\"pubg\"),\n  teamName: text(\"team_name\").notNull(),\n  leaderName: text(\"leader_name\").notNull(),\n  leaderWhatsapp: text(\"leader_whatsapp\").notNull(),\n  leaderPlayerId: text(\"leader_player_id\").notNull(),\n  player2Name: text(\"player2_name\").notNull(),\n  player2PlayerId: text(\"player2_player_id\").notNull(),\n  player3Name: text(\"player3_name\").notNull(),\n  player3PlayerId: text(\"player3_player_id\").notNull(),\n  player4Name: text(\"player4_name\").notNull(),\n  player4PlayerId: text(\"player4_player_id\").notNull(),\n  youtubeVote: text(\"youtube_vote\").notNull().default(\"no\"),\n  transactionId: text(\"transaction_id\").notNull(),\n  paymentScreenshot: text(\"payment_screenshot\").notNull(),\n  agreedToTerms: integer(\"agreed_to_terms\").notNull().default(1),\n  status: text(\"status\").notNull().default(\"pending\"),\n  adminNotes: text(\"admin_notes\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n  adminNotes: true,\n}).extend({\n  gameType: z.enum([\"pubg\", \"freefire\"], {\n    errorMap: () => ({ message: \"Game type must be either PUBG or Free Fire\" }),\n  }),\n  teamName: z.string().min(3, \"Team name must be at least 3 characters\").max(50, \"Team name too long\"),\n  leaderName: z.string().min(2, \"Leader name required\"),\n  leaderWhatsapp: z.string().regex(/^\\d{10}$/, \"WhatsApp number must be 10 digits\"),\n  leaderPlayerId: z.string().min(3, \"Valid Player ID required\"),\n  player2Name: z.string().min(2, \"Player 2 name required\"),\n  player2PlayerId: z.string().min(3, \"Valid Player ID required\"),\n  player3Name: z.string().min(2, \"Player 3 name required\"),\n  player3PlayerId: z.string().min(3, \"Valid Player ID required\"),\n  player4Name: z.string().min(2, \"Player 4 name required\"),\n  player4PlayerId: z.string().min(3, \"Valid Player ID required\"),\n  youtubeVote: z.enum([\"yes\", \"no\"], {\n    errorMap: () => ({ message: \"Please select Yes or No\" }),\n  }),\n  transactionId: z.string().min(5, \"Transaction ID required\"),\n  paymentScreenshot: z.string().min(1, \"Payment screenshot required\"),\n  agreedToTerms: z.union([z.literal(0), z.literal(1)]),\n}).refine((data) => data.agreedToTerms === 1, {\n  message: \"You must agree to terms and conditions\",\n  path: [\"agreedToTerms\"],\n});\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\nexport const insertAdminSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAdmin = z.infer<typeof insertAdminSchema>;\nexport type Admin = typeof adminUsers.$inferSelect;\n\n// Tournament Configuration\nexport const TOURNAMENT_CONFIG = {\n  PUBG: {\n    MAX_TEAMS: 25,\n    ENTRY_FEE: 80,\n    PRIZE_WINNER: 1000,\n    PRIZE_RUNNER_UP: 400,\n    GAME_MODE: \"Squad (4 Players)\",\n    MAP: \"Erangel (Classic)\",\n    TOURNAMENT_DATE: \"2025-10-25T18:00:00\",\n  },\n  FREE_FIRE: {\n    MAX_TEAMS: 12,\n    ENTRY_FEE: 80,\n    PRIZE_WINNER: 500,\n    PRIZE_RUNNER_UP: 260,\n    GAME_MODE: \"Squad (4 Players)\",\n    MAP: \"Bermuda / Purgatory / Kalahari\",\n    TOURNAMENT_DATE: \"2025-10-26T18:00:00\",\n  },\n} as const;\n","size_bytes":3829},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 15% 12%;\n\n  --border: 220 13% 91%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 220 13% 89%;\n\n  --sidebar: 220 10% 94%;\n\n  --sidebar-foreground: 220 15% 18%;\n\n  --sidebar-border: 220 13% 87%;\n\n  --sidebar-primary: 25 95% 53%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 25 95% 53%;\n\n  --popover: 0 0% 93%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 13% 86%;\n\n  --primary: 25 95% 53%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 12% 88%;\n\n  --secondary-foreground: 220 15% 22%;\n\n  --muted: 220 15% 91%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 18% 89%;\n\n  --accent-foreground: 220 15% 25%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 13% 82%;\n  --ring: 25 95% 53%;\n  --chart-1: 25 95% 45%;\n  --chart-2: 200 95% 45%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 45 93% 47%;\n  --chart-5: 280 65% 48%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: 'Sora', Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Courier New', monospace;\n  --font-display: 'Space Grotesk', 'Outfit', sans-serif;\n  --font-heading: 'Outfit', 'Space Grotesk', sans-serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 8% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 8% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 15% 8% / 0.06), 0px 1px 2px -1px hsl(220 15% 8% / 0.10);\n  --shadow: 0px 4px 6px -2px hsl(220 15% 8% / 0.05), 0px 2px 4px -2px hsl(220 15% 8% / 0.10);\n  --shadow-md: 0px 6px 8px -2px hsl(220 15% 8% / 0.08), 0px 4px 6px -2px hsl(220 15% 8% / 0.12);\n  --shadow-lg: 0px 12px 16px -4px hsl(220 15% 8% / 0.08), 0px 8px 12px -4px hsl(220 15% 8% / 0.12);\n  --shadow-xl: 0px 20px 24px -6px hsl(220 15% 8% / 0.10), 0px 12px 16px -4px hsl(220 15% 8% / 0.15);\n  --shadow-2xl: 0px 32px 48px -8px hsl(220 15% 8% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 12%;\n\n  --card-foreground: 0 0% 96%;\n\n  --card-border: 220 15% 20%;\n\n  --sidebar: 220 15% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 15% 16%;\n\n  --sidebar-primary: 25 95% 53%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 15% 16%;\n\n  --sidebar-accent-foreground: 0 0% 92%;\n\n  --sidebar-ring: 25 95% 53%;\n\n  --popover: 220 15% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 15% 22%;\n\n  --primary: 25 95% 53%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 15% 18%;\n\n  --secondary-foreground: 0 0% 92%;\n\n  --muted: 220 15% 16%;\n\n  --muted-foreground: 220 9% 65%;\n\n  --accent: 220 18% 18%;\n\n  --accent-foreground: 0 0% 90%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 28%;\n  --ring: 25 95% 53%;\n  --chart-1: 25 95% 58%;\n  --chart-2: 200 95% 60%;\n  --chart-3: 142 76% 48%;\n  --chart-4: 45 93% 58%;\n  --chart-5: 280 65% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 4px 6px -2px hsl(0 0% 0% / 0.20), 0px 2px 4px -2px hsl(0 0% 0% / 0.35);\n  --shadow-md: 0px 6px 8px -2px hsl(0 0% 0% / 0.25), 0px 4px 6px -2px hsl(0 0% 0% / 0.40);\n  --shadow-lg: 0px 12px 16px -4px hsl(0 0% 0% / 0.30), 0px 8px 12px -4px hsl(0 0% 0% / 0.45);\n  --shadow-xl: 0px 20px 24px -6px hsl(0 0% 0% / 0.35), 0px 12px 16px -4px hsl(0 0% 0% / 0.50);\n  --shadow-2xl: 0px 32px 48px -8px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  \n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-display;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Gaming-inspired gradient text utility */\n  .gradient-text {\n    @apply bg-clip-text text-transparent;\n    background-image: linear-gradient(135deg, hsl(var(--chart-1)), hsl(var(--chart-2)));\n  }\n\n  /* Hero section gradient overlay */\n  .hero-gradient {\n    background: linear-gradient(180deg, \n      hsl(var(--background) / 0.4) 0%, \n      hsl(var(--background) / 0.7) 50%,\n      hsl(var(--background)) 100%\n    );\n  }\n\n  /* Animated border glow effect for cards */\n  @keyframes border-glow {\n    0%, 100% {\n      border-color: hsl(var(--primary) / 0.3);\n    }\n    50% {\n      border-color: hsl(var(--primary) / 0.6);\n    }\n  }\n\n  .animate-border-glow {\n    animation: border-glow 2s ease-in-out infinite;\n  }\n\n  /* Pulse effect for slot counter */\n  @keyframes pulse-scale {\n    0%, 100% {\n      transform: scale(1);\n    }\n    50% {\n      transform: scale(1.05);\n    }\n  }\n\n  .animate-pulse-scale {\n    animation: pulse-scale 2s ease-in-out infinite;\n  }\n\n  /* Number flip animation for countdown */\n  @keyframes flip-number {\n    0% {\n      transform: rotateX(0deg);\n    }\n    50% {\n      transform: rotateX(90deg);\n    }\n    100% {\n      transform: rotateX(0deg);\n    }\n  }\n\n  .animate-flip {\n    animation: flip-number 0.6s ease-in-out;\n  }\n\n  /* Glass morphism effect */\n  .glass-effect {\n    @apply backdrop-blur-lg bg-card/80 border border-border;\n  }\n\n  /* Gradient shift animation for Free Fire */\n  @keyframes gradient-shift {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  .animate-gradient-shift {\n    animation: gradient-shift 3s ease infinite;\n  }\n\n  /* Smooth transitions for all interactive elements */\n  * {\n    transition-property: background-color, border-color, color, fill, stroke, opacity, box-shadow, transform;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 200ms;\n  }\n\n  /* Enhanced button hover effects */\n  .btn-hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);\n  }\n\n  .btn-hover-scale:hover {\n    transform: scale(1.05);\n  }\n\n  /* Gradient text effects */\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-2)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .gradient-text-fire {\n    background: linear-gradient(135deg, #ff6b1a 0%, #ff1744 50%, #ff9100 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  /* Card hover animations */\n  .card-hover-float {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .card-hover-float:hover {\n    transform: translateY(-8px) scale(1.02);\n    box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.15);\n  }\n\n  /* Glassmorphism */\n  .glass-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-card {\n    background: rgba(0, 0, 0, 0.2);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Animated gradient border */\n  .gradient-border {\n    position: relative;\n    background: linear-gradient(hsl(var(--background)), hsl(var(--background))) padding-box,\n                linear-gradient(135deg, hsl(var(--primary)), hsl(var(--chart-2))) border-box;\n    border: 2px solid transparent;\n  }\n\n  /* Parallax effect helper */\n  .parallax-slow {\n    transform: translateY(var(--scroll-y, 0));\n  }\n\n  /* Responsive font sizes */\n  .text-responsive-xl {\n    font-size: clamp(2rem, 5vw, 4rem);\n  }\n\n  .text-responsive-lg {\n    font-size: clamp(1.5rem, 4vw, 3rem);\n  }\n\n  .text-responsive-md {\n    font-size: clamp(1.25rem, 3vw, 2rem);\n  }\n\n  .text-responsive-sm {\n    font-size: clamp(1rem, 2vw, 1.5rem);\n  }\n\n  /* Improved scrollbar */\n  ::-webkit-scrollbar {\n    width: 12px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--background));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary) / 0.5);\n    border-radius: 6px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--primary));\n  }\n\n  /* Loading pulse animation */\n  @keyframes loading-pulse {\n    0%, 100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.5;\n    }\n  }\n\n  .animate-loading-pulse {\n    animation: loading-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  /* Skeleton loader */\n  .skeleton {\n    background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--muted-foreground) / 0.1) 50%, hsl(var(--muted)) 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s ease-in-out infinite;\n  }\n\n  @keyframes skeleton-loading {\n    0% {\n      background-position: 200% 0;\n    }\n    100% {\n      background-position: -200% 0;\n    }\n  }\n\n  /* Mobile-first responsive utilities */\n  @media (max-width: 640px) {\n    .mobile-full {\n      width: 100% !important;\n    }\n\n    .mobile-text-center {\n      text-align: center !important;\n    }\n\n    .mobile-p-4 {\n      padding: 1rem !important;\n    }\n\n    .mobile-mb-4 {\n      margin-bottom: 1rem !important;\n    }\n  }\n\n  /* Smooth scroll behavior */\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Focus visible for accessibility */\n  *:focus-visible {\n    outline: 2px solid hsl(var(--ring));\n    outline-offset: 2px;\n  }\n\n  /* Prevent text selection on buttons */\n  button, .no-select {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n}","size_bytes":16892},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/tournament/tournament-details.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Gamepad2, Map, Smartphone, Users, IndianRupee, Trophy } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface TournamentDetailsProps {\n  config: {\n    MAX_TEAMS: number;\n    ENTRY_FEE: number;\n    PRIZE_WINNER: number;\n    PRIZE_RUNNER_UP: number;\n    GAME_MODE: string;\n    MAP: string;\n  };\n  isLoading?: boolean;\n}\n\nexport function TournamentDetails({ config, isLoading = false }: TournamentDetailsProps) {\n  const details = [\n    {\n      icon: Gamepad2,\n      label: \"Game Mode\",\n      value: config.GAME_MODE,\n      color: \"text-chart-1\",\n      bg: \"bg-chart-1/10\",\n    },\n    {\n      icon: Map,\n      label: \"Map\",\n      value: config.MAP,\n      color: \"text-chart-2\",\n      bg: \"bg-chart-2/10\",\n    },\n    {\n      icon: Smartphone,\n      label: \"Platform\",\n      value: \"Mobile Only\",\n      color: \"text-chart-3\",\n      bg: \"bg-chart-3/10\",\n    },\n    {\n      icon: Users,\n      label: \"Total Slots\",\n      value: `${config.MAX_TEAMS} Teams`,\n      color: \"text-chart-4\",\n      bg: \"bg-chart-4/10\",\n    },\n    {\n      icon: IndianRupee,\n      label: \"Entry Fee\",\n      value: `₹${config.ENTRY_FEE} per team`,\n      color: \"text-chart-1\",\n      bg: \"bg-chart-1/10\",\n    },\n    {\n      icon: Trophy,\n      label: \"Prize Pool\",\n      value: `₹${config.PRIZE_WINNER + config.PRIZE_RUNNER_UP}`,\n      color: \"text-chart-4\",\n      bg: \"bg-chart-4/10\",\n    },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-12 sm:py-16 md:py-20 lg:py-28 container mx-auto px-4 sm:px-6\">\n        <div className=\"text-center mb-10 sm:mb-12 md:mb-16\">\n          <Skeleton className=\"h-10 sm:h-12 md:h-14 w-64 sm:w-80 mx-auto mb-4\" />\n          <Skeleton className=\"h-6 w-full max-w-2xl mx-auto\" />\n        </div>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 max-w-7xl mx-auto\">\n          {Array.from({ length: 6 }).map((_, index) => (\n            <Card key={index} className=\"p-6 sm:p-7\">\n              <div className=\"flex items-start gap-4 sm:gap-5\">\n                <Skeleton className=\"w-14 h-14 sm:w-16 sm:h-16 rounded-xl flex-shrink-0\" />\n                <div className=\"flex-1 space-y-3\">\n                  <Skeleton className=\"h-4 w-24\" />\n                  <Skeleton className=\"h-6 w-32\" />\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 sm:py-16 md:py-20 lg:py-28 container mx-auto px-4 sm:px-6\">\n      <motion.div \n        className=\"text-center mb-10 sm:mb-12 md:mb-16\"\n        initial={{ opacity: 0, y: 20 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        viewport={{ once: true, margin: \"-100px\" }}\n        transition={{ duration: 0.6 }}\n        data-aos=\"fade-up\"\n      >\n        <h2 \n          className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-display font-extrabold mb-4 sm:mb-5\" \n          style={{ fontSize: 'clamp(1.875rem, 5vw, 3.75rem)' }}\n          data-testid=\"text-section-tournament-details\"\n        >\n          Tournament Details\n        </h2>\n        <p \n          className=\"text-foreground/80 text-base sm:text-lg md:text-xl max-w-2xl mx-auto font-medium\"\n          style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n        >\n          Everything you need to know about the championship\n        </p>\n      </motion.div>\n\n      <motion.div \n        className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 max-w-7xl mx-auto\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n      >\n        {details.map((detail, index) => (\n          <motion.div\n            key={index}\n            variants={itemVariants}\n            data-aos=\"fade-up\"\n            data-aos-delay={index * 100}\n          >\n            <Card \n              className=\"p-6 sm:p-7 hover-elevate transition-all duration-500 hover:scale-105 hover:shadow-2xl hover:border-primary/20 group min-h-[140px] sm:min-h-[160px]\"\n              data-testid={`card-detail-${detail.label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <div className=\"flex items-start gap-4 sm:gap-5\">\n                <div className={`p-3 sm:p-4 rounded-xl ${detail.bg} flex-shrink-0 transition-all duration-500 group-hover:scale-110 group-hover:rotate-3 min-w-[56px] min-h-[56px] sm:min-w-[64px] sm:min-h-[64px] flex items-center justify-center`}>\n                  <detail.icon className={`w-6 h-6 sm:w-7 sm:h-7 ${detail.color} transition-transform duration-500 group-hover:scale-110`} />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 \n                    className=\"font-semibold text-xs sm:text-sm text-muted-foreground mb-2 uppercase tracking-wide\"\n                    style={{ fontSize: 'clamp(0.75rem, 1.5vw, 0.875rem)' }}\n                  >\n                    {detail.label}\n                  </h3>\n                  <p \n                    className=\"font-display font-bold text-lg sm:text-xl md:text-2xl break-words\"\n                    style={{ fontSize: 'clamp(1.125rem, 2.5vw, 1.5rem)' }}\n                  >\n                    {detail.value}\n                  </p>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        ))}\n      </motion.div>\n    </section>\n  );\n}\n","size_bytes":5862},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/tournament/registered-teams.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Shield, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Team } from \"@shared/schema\";\nimport { motion } from \"framer-motion\";\n\ninterface RegisteredTeamsProps {\n  gameType: \"pubg\" | \"freefire\";\n}\n\nexport function RegisteredTeams({ gameType }: RegisteredTeamsProps) {\n  const { data: allTeams = [], isLoading } = useQuery<Team[]>({\n    queryKey: ['/api/teams'],\n    refetchInterval: 5000,\n  });\n\n  const teams = allTeams.filter(team => team.gameType === gameType);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <section className=\"py-12 sm:py-16 md:py-20 lg:py-28 bg-secondary/40\">\n        <div className=\"container mx-auto px-4 sm:px-6\">\n          <div className=\"text-center mb-10 sm:mb-12 md:mb-16\">\n            <Skeleton className=\"h-10 sm:h-12 md:h-14 w-64 sm:w-80 mx-auto mb-4\" />\n            <Skeleton className=\"h-6 w-48 mx-auto\" />\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 max-w-7xl mx-auto\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"p-6 sm:p-7\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-4\">\n                      <Skeleton className=\"w-12 h-12 rounded-xl\" />\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-6 w-32\" />\n                        <Skeleton className=\"h-4 w-20\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-6 w-24 rounded-full\" />\n                  </div>\n                  <div className=\"space-y-3\">\n                    <Skeleton className=\"h-5 w-full\" />\n                    <Skeleton className=\"h-5 w-3/4\" />\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (teams.length === 0) {\n    return (\n      <section className=\"py-12 sm:py-16 md:py-20 lg:py-28 bg-secondary/40\">\n        <div className=\"container mx-auto px-4 sm:px-6\">\n          <motion.div \n            className=\"text-center mb-10 sm:mb-12 md:mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.6 }}\n            data-aos=\"fade-up\"\n          >\n            <h2 \n              className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-display font-extrabold mb-4 sm:mb-5\" \n              style={{ fontSize: 'clamp(1.875rem, 5vw, 3.75rem)' }}\n              data-testid=\"text-section-teams\"\n            >\n              Registered Teams\n            </h2>\n            <p \n              className=\"text-foreground/80 text-base sm:text-lg md:text-xl font-medium\"\n              style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n            >\n              Be the first team to register for this epic tournament!\n            </p>\n          </motion.div>\n          <motion.div \n            className=\"max-w-lg mx-auto\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            viewport={{ once: true }}\n            transition={{ duration: 0.5 }}\n            data-aos=\"zoom-in\"\n          >\n            <Card className=\"p-12 sm:p-16 md:p-20 text-center hover:shadow-2xl hover:scale-105 transition-all duration-500\">\n              <motion.div\n                animate={{ \n                  scale: [1, 1.1, 1],\n                  rotate: [0, 5, -5, 0]\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  repeatType: \"reverse\"\n                }}\n              >\n                <Users className=\"w-16 h-16 sm:w-20 sm:h-20 md:w-24 md:h-24 text-muted-foreground mx-auto mb-6 opacity-40\" />\n              </motion.div>\n              <p \n                className=\"text-foreground/70 text-base sm:text-lg md:text-xl font-medium\"\n                style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n              >\n                No teams registered yet. Register your squad now!\n              </p>\n            </Card>\n          </motion.div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 sm:py-16 md:py-20 lg:py-28 bg-secondary/40\">\n      <div className=\"container mx-auto px-4 sm:px-6\">\n        <motion.div \n          className=\"text-center mb-10 sm:mb-12 md:mb-16\"\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true, margin: \"-100px\" }}\n          transition={{ duration: 0.6 }}\n          data-aos=\"fade-up\"\n        >\n          <h2 \n            className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-display font-extrabold mb-4 sm:mb-5\" \n            style={{ fontSize: 'clamp(1.875rem, 5vw, 3.75rem)' }}\n            data-testid=\"text-section-teams\"\n          >\n            Registered Teams\n          </h2>\n          <p \n            className=\"text-foreground/80 text-base sm:text-lg md:text-xl font-medium\"\n            style={{ fontSize: 'clamp(1rem, 2vw, 1.25rem)' }}\n          >\n            {teams.length} squad{teams.length !== 1 ? 's' : ''} ready for battle\n          </p>\n        </motion.div>\n\n        <motion.div \n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 md:gap-8 max-w-7xl mx-auto\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true, margin: \"-100px\" }}\n        >\n          {teams.map((team, index) => (\n            <motion.div\n              key={team.id}\n              variants={itemVariants}\n              data-aos=\"flip-left\"\n              data-aos-delay={index * 100}\n            >\n              <Card \n                className=\"p-6 sm:p-7 hover-elevate transition-all duration-500 hover:scale-105 relative overflow-hidden group hover:shadow-2xl min-h-[180px] sm:min-h-[200px] hover:border-primary/30\"\n                data-testid={`card-team-${team.id}`}\n              >\n                <div className=\"absolute top-0 right-0 w-32 h-32 bg-primary/10 rounded-full blur-2xl -mr-16 -mt-16 group-hover:scale-150 transition-transform duration-700\"></div>\n                \n                <div className=\"relative\">\n                  <div className=\"flex items-start justify-between mb-4 sm:mb-5 flex-wrap gap-3\">\n                    <div className=\"flex items-center gap-3 sm:gap-4 min-w-0 flex-1\">\n                      <div className=\"p-2.5 sm:p-3 rounded-xl bg-primary/15 transition-all duration-500 group-hover:scale-110 group-hover:rotate-6 flex-shrink-0 min-w-[48px] min-h-[48px] sm:min-w-[52px] sm:min-h-[52px] flex items-center justify-center\">\n                        <Shield className=\"w-5 h-5 sm:w-6 sm:h-6 text-primary transition-transform duration-500 group-hover:scale-110\" />\n                      </div>\n                      <div className=\"min-w-0\">\n                        <h3 \n                          className=\"font-display font-bold text-lg sm:text-xl md:text-2xl truncate\" \n                          style={{ fontSize: 'clamp(1.125rem, 2.5vw, 1.5rem)' }}\n                          data-testid={`text-team-name-${team.id}`}\n                        >\n                          {team.teamName}\n                        </h3>\n                        <p \n                          className=\"text-xs sm:text-sm text-muted-foreground font-medium\"\n                          style={{ fontSize: 'clamp(0.75rem, 1.25vw, 0.875rem)' }}\n                        >\n                          Team #{index + 1}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge \n                      variant=\"outline\" \n                      className=\"bg-chart-3/15 border-chart-3/50 hover:bg-chart-3/25 transition-colors duration-300 min-h-[32px] px-3\" \n                      data-testid={`badge-team-status-${team.id}`}\n                    >\n                      <CheckCircle className=\"w-3 h-3 mr-1.5\" />\n                      <span style={{ fontSize: 'clamp(0.75rem, 1.25vw, 0.875rem)' }}>Registered</span>\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-2.5 sm:space-y-3\">\n                    <div \n                      className=\"flex items-center gap-2.5 sm:gap-3 text-sm sm:text-base min-h-[36px]\"\n                      style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n                    >\n                      <Users className=\"w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground flex-shrink-0\" />\n                      <span className=\"text-muted-foreground flex-shrink-0\">Leader:</span>\n                      <span className=\"font-semibold truncate\">{team.leaderName}</span>\n                    </div>\n                    <div \n                      className=\"flex items-center gap-2.5 sm:gap-3 text-sm sm:text-base min-h-[36px]\"\n                      style={{ fontSize: 'clamp(0.875rem, 1.5vw, 1rem)' }}\n                    >\n                      <Shield className=\"w-4 h-4 sm:w-5 sm:h-5 text-muted-foreground flex-shrink-0\" />\n                      <span className=\"text-muted-foreground flex-shrink-0\">Squad:</span>\n                      <span className=\"font-semibold\">4 Players</span>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10130},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/setup-admin.ts":{"content":"import { db } from \"./db\";\nimport { adminUsers } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport { eq } from \"drizzle-orm\";\n\nasync function setupAdmin() {\n  const username = process.argv[2] || \"admin\";\n  const password = process.argv[3] || \"admin123\";\n\n  try {\n    const existingAdmin = await db\n      .select()\n      .from(adminUsers)\n      .where(eq(adminUsers.username, username))\n      .limit(1);\n\n    if (existingAdmin.length > 0) {\n      console.log(`Admin user '${username}' already exists.`);\n      process.exit(0);\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    await db.insert(adminUsers).values({\n      username,\n      password: hashedPassword,\n    });\n\n    console.log(`Admin user '${username}' created successfully!`);\n    console.log(`Username: ${username}`);\n    console.log(`Password: ${password}`);\n    console.log(\"\\nPlease change the password after first login.\");\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n    process.exit(1);\n  }\n}\n\nsetupAdmin();\n","size_bytes":1066},"VERCEL_DEPLOY_GUIDE.md":{"content":"# Vercel Deployment Guide - Quick Start\n\n## ✅ Your App is Ready for Vercel!\n\nAll necessary changes have been completed. Follow these steps to deploy:\n\n---\n\n## Step 1: Environment Variables\n\nIn your Vercel project dashboard, go to **Settings → Environment Variables** and add:\n\n### Required Variables:\n```\nDATABASE_URL=your-neon-database-url\nSESSION_SECRET=your-random-secret-at-least-32-characters\nNODE_ENV=production\n```\n\n### Optional (for real-time features):\n```\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_KEY=your-pusher-key\nPUSHER_SECRET=your-pusher-secret\nPUSHER_CLUSTER=ap2\nVITE_PUSHER_KEY=your-pusher-key\nVITE_PUSHER_CLUSTER=ap2\n```\n\n**Note**: Pusher variables are optional. The app works without them but won't have real-time slot updates.\n\n---\n\n## Step 2: Generate SESSION_SECRET\n\nRun this command to generate a secure secret:\n\n```bash\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\nCopy the output and use it as your `SESSION_SECRET`.\n\n---\n\n## Step 3: Deploy\n\n### Option A: Deploy from Vercel Dashboard\n1. Go to https://vercel.com\n2. Click \"New Project\"\n3. Import your repository\n4. Vercel will auto-detect the configuration\n5. Click \"Deploy\"\n\n### Option B: Deploy from Command Line\n```bash\nnpm install -g vercel\nvercel login\nvercel --prod\n```\n\n---\n\n## Step 4: After First Deployment\n\nIf you forgot to add environment variables:\n1. Go to Vercel Dashboard → Your Project → Settings → Environment Variables\n2. Add all required variables\n3. Go to Deployments tab\n4. Click the three dots on latest deployment → \"Redeploy\"\n\n---\n\n## ✅ What's Been Fixed\n\n1. **Vercel Configuration**: Updated `vercel.json` to route correctly\n2. **Authentication**: Migrated from express-session to JWT (serverless-compatible)\n3. **Form Performance**: Removed all animations - form loads instantly now\n4. **Image Handling**: Added compression to reduce payload from 50MB to ~300KB\n5. **Security**: Proper JWT implementation with secure cookies\n6. **Error Handling**: Added production-ready error logging\n\n---\n\n## 🐛 Troubleshooting\n\n### \"SESSION_SECRET not set\" error\n- Make sure you added `SESSION_SECRET` in Vercel environment variables\n- Redeploy after adding it\n\n### \"Database connection failed\"\n- Verify `DATABASE_URL` is correct (should be Neon database URL)\n- Make sure it starts with `postgresql://` or `postgres://`\n\n### Form still slow on mobile\n- Clear your browser cache\n- The new deployment has removed all animations\n- Form should load instantly now\n\n---\n\n## 📊 Expected Performance\n\n- **Build Time**: ~20-30 seconds\n- **Form Load**: Instant (animations removed)\n- **Image Upload**: ~2-3 seconds (with compression)\n- **API Response**: <500ms\n\n---\n\n## 🎯 Next Steps\n\nAfter successful deployment:\n1. Test the registration form on mobile\n2. Test admin login\n3. Verify team registration works\n4. Check that Excel export works\n\n---\n\n**Last Updated**: October 19, 2025\n","size_bytes":2911},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4092},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"./storage\";\nimport { insertTeamSchema, TOURNAMENT_CONFIG } from \"@shared/schema\";\nimport { requireAuth, signToken, setTokenCookie, clearTokenCookie, getTokenFromRequest, verifyToken } from \"./auth\";\nimport bcrypt from \"bcryptjs\";\nimport ExcelJS from \"exceljs\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nexport async function registerRoutes(app: Express): Promise<void> {\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      const admin = await storage.getAdminByUsername(username);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValid = await bcrypt.compare(password, admin.password);\n      if (!isValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const token = signToken({ id: admin.id, username: admin.username });\n      setTokenCookie(res, token);\n      \n      res.json({ message: \"Login successful\", username: admin.username });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (_req, res) => {\n    clearTokenCookie(res);\n    res.json({ message: \"Logout successful\" });\n  });\n\n  app.get(\"/api/admin/me\", (req, res) => {\n    const token = getTokenFromRequest(req);\n    if (!token) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    const payload = verifyToken(token);\n    if (!payload) {\n      return res.status(401).json({ message: \"Invalid token\" });\n    }\n    res.json({ username: payload.username });\n  });\n\n  app.get(\"/api/teams\", async (_req, res) => {\n    try {\n      const teams = await storage.getAllTeams();\n      res.json(teams);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/count\", async (_req, res) => {\n    try {\n      const count = await storage.getTeamCount();\n      res.json({ count });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/count/:gameType\", async (req, res) => {\n    try {\n      const { gameType } = req.params;\n      if (gameType !== 'pubg' && gameType !== 'freefire') {\n        return res.status(400).json({ message: \"Invalid game type\" });\n      }\n      const count = await storage.getTeamCountByGameType(gameType);\n      res.json({ count });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/teams\", async (req, res) => {\n    try {\n      const validatedData = insertTeamSchema.parse(req.body);\n      const team = await storage.createTeam(validatedData);\n      \n      // Fire-and-forget Pusher notification (don't block on failure)\n      (async () => {\n        try {\n          const { notifyTeamRegistration } = await import(\"./services/pusher\");\n          await notifyTeamRegistration(team.gameType);\n        } catch (err) {\n          console.warn(\"Failed to send Pusher notification:\", err);\n        }\n      })();\n      \n      res.status(201).json(team);\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      } else {\n        res.status(400).json({ message: error.message });\n      }\n    }\n  });\n\n  app.get(\"/api/teams/:id\", async (req, res) => {\n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) {\n        res.status(404).json({ message: \"Team not found\" });\n        return;\n      }\n      res.json(team);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/teams/search\", async (req, res) => {\n    try {\n      const { query, status } = req.query;\n      \n      if (!query && !status) {\n        const teams = await storage.getAllTeams();\n        res.json(teams);\n        return;\n      }\n      \n      const teams = await storage.searchTeams(\n        (query as string) || \"\",\n        status as string | undefined\n      );\n      res.json(teams);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", requireAuth, async (_req, res) => {\n    try {\n      const totalTeams = await storage.getTeamCount();\n      const pubgTeams = await storage.getTeamCountByGameType(\"pubg\");\n      const freeFireTeams = await storage.getTeamCountByGameType(\"freefire\");\n      const pendingTeams = await storage.getTeamCountByStatus(\"pending\");\n      const approvedTeams = await storage.getTeamCountByStatus(\"approved\");\n      const rejectedTeams = await storage.getTeamCountByStatus(\"rejected\");\n      \n      res.json({\n        total: totalTeams,\n        pubgTeams,\n        freeFireTeams,\n        pending: pendingTeams,\n        approved: approvedTeams,\n        rejected: rejectedTeams,\n        pubgAvailable: TOURNAMENT_CONFIG.PUBG.MAX_TEAMS - pubgTeams,\n        freeFireAvailable: TOURNAMENT_CONFIG.FREE_FIRE.MAX_TEAMS - freeFireTeams,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/teams/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const validStatuses = [\"pending\", \"approved\", \"rejected\"];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status value\" });\n      }\n      const team = await storage.updateTeamStatus(req.params.id, status);\n      \n      // Fire-and-forget Pusher notification (don't block on failure)\n      (async () => {\n        try {\n          const { notifyPaymentUpdate } = await import(\"./services/pusher\");\n          await notifyPaymentUpdate(team.id);\n        } catch (err) {\n          console.warn(\"Failed to send Pusher notification:\", err);\n        }\n      })();\n      \n      res.json(team);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/teams/:id/notes\", requireAuth, async (req, res) => {\n    try {\n      const { notes } = req.body;\n      const team = await storage.updateTeamNotes(req.params.id, notes);\n      res.json(team);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/teams/bulk-status\", requireAuth, async (req, res) => {\n    try {\n      const { ids, status } = req.body;\n      if (!Array.isArray(ids) || ids.length === 0) {\n        return res.status(400).json({ message: \"Invalid team IDs\" });\n      }\n      const validStatuses = [\"pending\", \"approved\", \"rejected\"];\n      if (!validStatuses.includes(status)) {\n        return res.status(400).json({ message: \"Invalid status value\" });\n      }\n      const teams = await storage.bulkUpdateStatus(ids, status);\n      res.json(teams);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/admin/teams/export\", requireAuth, async (req, res) => {\n    try {\n      const { gameType } = req.query;\n      const teams = await storage.getAllTeams();\n      \n      const filteredTeams = gameType && (gameType === 'pubg' || gameType === 'freefire')\n        ? teams.filter(team => team.gameType === gameType)\n        : teams;\n      \n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet('Teams');\n      \n      worksheet.columns = [\n        { header: 'Game Type', key: 'gameType', width: 15 },\n        { header: 'Team Name', key: 'teamName', width: 20 },\n        { header: 'Leader Name', key: 'leaderName', width: 20 },\n        { header: 'Leader WhatsApp', key: 'leaderWhatsapp', width: 15 },\n        { header: 'Leader Player ID', key: 'leaderPlayerId', width: 20 },\n        { header: 'Player 2 Name', key: 'player2Name', width: 20 },\n        { header: 'Player 2 Player ID', key: 'player2PlayerId', width: 20 },\n        { header: 'Player 3 Name', key: 'player3Name', width: 20 },\n        { header: 'Player 3 Player ID', key: 'player3PlayerId', width: 20 },\n        { header: 'Player 4 Name', key: 'player4Name', width: 20 },\n        { header: 'Player 4 Player ID', key: 'player4PlayerId', width: 20 },\n        { header: 'YouTube Live Vote', key: 'youtubeVote', width: 15 },\n        { header: 'Transaction ID', key: 'transactionId', width: 25 },\n        { header: 'Payment Screenshot', key: 'paymentScreenshot', width: 50 },\n        { header: 'Status', key: 'status', width: 15 },\n        { header: 'Admin Notes', key: 'adminNotes', width: 30 },\n        { header: 'Registration Date', key: 'createdAt', width: 20 },\n      ];\n\n      filteredTeams.forEach(team => {\n        worksheet.addRow({\n          ...team,\n          createdAt: new Date(team.createdAt).toLocaleString(),\n          adminNotes: team.adminNotes || '',\n        });\n      });\n\n      worksheet.getRow(1).font = { bold: true };\n\n      const baseExportsDir = path.join(process.cwd(), 'exports');\n      const gameFolder = gameType === 'pubg' ? 'pubg' : gameType === 'freefire' ? 'freefire' : 'all';\n      const exportsDir = path.join(baseExportsDir, gameFolder);\n      \n      if (!fs.existsSync(exportsDir)) {\n        fs.mkdirSync(exportsDir, { recursive: true });\n      }\n\n      const gameName = gameType === 'pubg' ? 'PUBG' : gameType === 'freefire' ? 'FreeFire' : 'All';\n      const filename = `${gameName}-teams-${new Date().toISOString().split('T')[0]}-${Date.now()}.xlsx`;\n      const filepath = path.join(exportsDir, filename);\n\n      await workbook.xlsx.writeFile(filepath);\n\n      res.setHeader(\n        'Content-Type',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      );\n      res.setHeader(\n        'Content-Disposition',\n        `attachment; filename=${filename}`\n      );\n\n      const fileBuffer = await workbook.xlsx.writeBuffer();\n      res.send(fileBuffer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n}\n","size_bytes":10053},"api/auth.ts":{"content":"import jwt from 'jsonwebtoken';\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'your-secret-key-change-this';\n\nexport function generateToken(adminId: number, username: string) {\n  return jwt.sign(\n    { id: adminId, username },\n    JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n}\n\nexport function verifyToken(token: string) {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function requireAuth(req: any, res: any, next: any) {\n  const token = req.cookies?.token || req.headers.authorization?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET);\n    req.admin = decoded;\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n}","size_bytes":838},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/tournament/slot-counter.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useEffect } from \"react\";\nimport { tournamentChannel } from \"@/lib/pusher\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface SlotCounterProps {\n  gameType: \"pubg\" | \"freefire\";\n  maxTeams: number;\n}\n\nexport function SlotCounter({ gameType, maxTeams }: SlotCounterProps) {\n  const { data: countData, isLoading } = useQuery<{ count: number }>({\n    queryKey: [`/api/teams/count/${gameType}`],\n    refetchInterval: 5000,\n  });\n\n  useEffect(() => {\n    const handleTeamRegistered = (data: { gameType: string }) => {\n      if (data.gameType === gameType) {\n        queryClient.invalidateQueries({ queryKey: [`/api/teams/count/${gameType}`] });\n        queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      }\n    };\n\n    tournamentChannel.bind('team-registered', handleTeamRegistered);\n\n    return () => {\n      tournamentChannel.unbind('team-registered', handleTeamRegistered);\n    };\n  }, [gameType]);\n\n  const teamsCount = countData?.count || 0;\n  const slotsRemaining = maxTeams - teamsCount;\n  const percentFilled = (teamsCount / maxTeams) * 100;\n  const isAlmostFull = slotsRemaining <= 5;\n\n  return (\n    <Card \n      className={`p-4 sm:p-6 backdrop-blur-md bg-card/80 card-hover-float ${isAlmostFull ? 'animate-pulse-scale border-chart-4/50' : ''}`} \n      data-testid=\"card-slot-counter\"\n      data-aos=\"zoom-in\"\n      data-aos-duration=\"600\"\n    >\n      <div className=\"flex items-center gap-2 sm:gap-3 mb-3 sm:mb-4\">\n        <div className=\"p-1.5 sm:p-2 rounded-lg bg-chart-2/10\">\n          <Users className=\"w-4 h-4 sm:w-5 sm:h-5 text-chart-2\" />\n        </div>\n        <h3 className=\"font-display font-semibold text-base sm:text-lg\">Team Slots</h3>\n      </div>\n      \n      {isLoading ? (\n        <div className=\"space-y-3\">\n          <div className=\"h-8 sm:h-10 skeleton rounded\"></div>\n          <div className=\"h-2 skeleton rounded\"></div>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          <div className=\"flex items-baseline justify-between\">\n            <div>\n              <span className=\"text-2xl sm:text-3xl md:text-4xl font-display font-bold text-chart-2\" data-testid=\"text-teams-registered\">\n                {teamsCount}\n              </span>\n              <span className=\"text-muted-foreground mx-1 sm:mx-2 text-sm sm:text-base\">/</span>\n              <span className=\"text-xl sm:text-2xl font-display font-semibold text-muted-foreground\">\n                {maxTeams}\n              </span>\n            </div>\n            <span \n              className={`text-xs sm:text-sm font-semibold ${isAlmostFull ? 'text-chart-4 animate-pulse' : 'text-chart-3'}`}\n              data-testid=\"text-slots-remaining\"\n            >\n              {slotsRemaining} left\n            </span>\n          </div>\n          \n          <Progress value={percentFilled} className=\"h-2\" data-testid=\"progress-slots\" />\n          \n          {isAlmostFull && (\n            <p className=\"text-xs text-chart-4 font-semibold animate-pulse\">\n              ⚠️ Hurry! Only {slotsRemaining} slots remaining\n            </p>\n          )}\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":3308},"api/index.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"../server/routes\";\nimport { initializeDatabase } from \"../server/init-db\";\n\nconst app = express();\n\napp.use(express.json({ limit: \"50mb\" }));\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\n\n// CORS for Vercel - Allow requests from any origin\napp.use((req, res, next) => {\n  const origin = req.headers.origin || '*';\n  res.header(\"Access-Control-Allow-Origin\", origin);\n  res.header(\"Access-Control-Allow-Credentials\", \"true\");\n  res.header(\n    \"Access-Control-Allow-Methods\",\n    \"GET, POST, PUT, DELETE, PATCH, OPTIONS\"\n  );\n  res.header(\"Access-Control-Allow-Headers\", \"Content-Type, Authorization, Cookie\");\n  if (req.method === \"OPTIONS\") {\n    return res.sendStatus(200);\n  }\n  next();\n});\n\n// Request logging\napp.use((req, res, next) => {\n  const start = Date.now();\n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    console.log(`${req.method} ${req.path} ${res.statusCode} ${duration}ms`);\n  });\n  next();\n});\n\n// Initialize database and routes on first request (serverless)\nlet initPromise: Promise<void> | null = null;\n\nconst ensureInit = async () => {\n  if (!initPromise) {\n    initPromise = (async () => {\n      try {\n        console.log('🔧 Initializing database for Vercel...');\n        await initializeDatabase();\n        console.log('✅ Database initialized');\n        \n        console.log('📋 Registering routes...');\n        await registerRoutes(app);\n        console.log('✅ Routes registered');\n      } catch (err) {\n        console.error('❌ Initialization failed:', err);\n        initPromise = null;\n        throw err;\n      }\n    })();\n  }\n  return initPromise;\n};\n\n// Middleware to ensure initialization before handling requests\napp.use(async (req, res, next) => {\n  try {\n    await ensureInit();\n    next();\n  } catch (err) {\n    next(err);\n  }\n});\n\n// Global error handler\napp.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\n  console.error('Error:', err);\n  const status = err.status || err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n  res.status(status).json({ message });\n});\n\n// Export for Vercel serverless\nexport default app;\n","size_bytes":2246},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport PubgTournament from \"@/pages/pubg-tournament\";\nimport FreeFireTournament from \"@/pages/free-fire-tournament\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {() => <Redirect to=\"/pubg\" />}\n      </Route>\n      <Route path=\"/pubg\" component={PubgTournament} />\n      <Route path=\"/free-fire\" component={FreeFireTournament} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/admin\">\n        {() => <Redirect to=\"/admin/dashboard\" />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"fixed top-4 right-4 z-50\">\n          <ThemeToggle />\n        </div>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1419},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/pages/pubg-tournament.tsx":{"content":"import { useState } from \"react\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Hero } from \"@/components/tournament/hero\";\nimport { TournamentDetails } from \"@/components/tournament/tournament-details\";\nimport { PrizePool } from \"@/components/tournament/prize-pool\";\nimport { GameRegistrationForm } from \"@/components/tournament/game-registration-form\";\nimport { RegisteredTeams } from \"@/components/tournament/registered-teams\";\nimport { TournamentRules } from \"@/components/tournament/tournament-rules\";\nimport { Footer } from \"@/components/tournament/footer\";\nimport { SlotCounter } from \"@/components/tournament/slot-counter\";\nimport { TOURNAMENT_CONFIG } from \"@shared/schema\";\n\nexport default function PubgTournament() {\n  const [showRegistrationForm, setShowRegistrationForm] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <Hero onRegisterClick={() => setShowRegistrationForm(true)} gameType=\"pubg\" maxTeams={TOURNAMENT_CONFIG.PUBG.MAX_TEAMS} />\n      <TournamentDetails config={TOURNAMENT_CONFIG.PUBG} />\n      <PrizePool config={TOURNAMENT_CONFIG.PUBG} />\n      <TournamentRules gameType=\"pubg\" />\n      <RegisteredTeams gameType=\"pubg\" />\n      \n      {showRegistrationForm && (\n        <GameRegistrationForm\n          onClose={() => setShowRegistrationForm(false)}\n          gameType=\"pubg\"\n          gameName=\"PUBG Mobile\"\n          entryFee={TOURNAMENT_CONFIG.PUBG.ENTRY_FEE}\n        />\n      )}\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1517},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/tournament/hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, Users, Calendar } from \"lucide-react\";\nimport { CountdownTimer } from \"./countdown-timer\";\nimport { SlotCounter } from \"./slot-counter\";\nimport heroImage from \"@assets/generated_images/PUBG_tournament_hero_image_76e84b21.png\";\n\ninterface HeroProps {\n  onRegisterClick: () => void;\n  gameType: \"pubg\" | \"freefire\";\n  maxTeams: number;\n}\n\nexport function Hero({ onRegisterClick, gameType, maxTeams }: HeroProps) {\n  return (\n    <div className=\"relative min-h-[600px] sm:min-h-[700px] lg:min-h-[800px] xl:min-h-[900px] flex items-center justify-center overflow-hidden\">\n      {/* Background Image with Enhanced Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 hero-gradient\"></div>\n      </div>\n\n      {/* Animated Gradient Orbs - Responsive sizes */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div \n          className=\"absolute top-10 sm:top-20 left-5 sm:left-10 w-48 h-48 sm:w-72 sm:h-72 bg-primary/20 rounded-full blur-3xl animate-pulse\"\n          data-aos=\"fade-in\"\n          data-aos-duration=\"1000\"\n        ></div>\n        <div \n          className=\"absolute bottom-10 sm:bottom-20 right-5 sm:right-10 w-64 h-64 sm:w-96 sm:h-96 bg-chart-2/20 rounded-full blur-3xl animate-pulse\" \n          style={{ animationDelay: '1s' }}\n          data-aos=\"fade-in\"\n          data-aos-duration=\"1000\"\n          data-aos-delay=\"200\"\n        ></div>\n        <div \n          className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-56 h-56 sm:w-80 sm:h-80 bg-chart-4/15 rounded-full blur-3xl animate-pulse\" \n          style={{ animationDelay: '2s' }}\n          data-aos=\"fade-in\"\n          data-aos-duration=\"1000\"\n          data-aos-delay=\"400\"\n        ></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-20 md:py-24 lg:py-28 text-center\">\n        <Badge \n          variant=\"outline\" \n          className=\"mb-6 sm:mb-8 text-xs sm:text-sm px-4 sm:px-5 py-1.5 sm:py-2 border-primary/60 bg-primary/15 backdrop-blur-md shadow-lg transition-all duration-300 hover:scale-105\"\n          data-testid=\"badge-tournament-type\"\n          data-aos=\"fade-down\"\n          data-aos-duration=\"600\"\n        >\n          <Trophy className=\"w-3 h-3 sm:w-4 sm:h-4 mr-2\" />\n          <span className=\"font-medium\">Squad Championship 2025</span>\n        </Badge>\n\n        <h1 \n          className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl 2xl:text-8xl font-display font-bold mb-6 sm:mb-8 leading-tight px-2\"\n          data-testid=\"text-hero-title\"\n          data-aos=\"fade-up\"\n          data-aos-duration=\"800\"\n        >\n          <span className=\"block mb-2 sm:mb-3\">Ultimate PUBG Mobile</span>\n          <span className=\"block gradient-text text-4xl sm:text-5xl md:text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl font-extrabold mt-2 sm:mt-3\">\n            Tournament\n          </span>\n        </h1>\n\n        <p \n          className=\"text-sm sm:text-base md:text-lg lg:text-xl text-foreground/80 mb-8 sm:mb-10 max-w-xs sm:max-w-md md:max-w-2xl lg:max-w-3xl mx-auto font-normal leading-relaxed px-4\"\n          data-testid=\"text-hero-subtitle\"\n          data-aos=\"fade-up\"\n          data-aos-duration=\"800\"\n          data-aos-delay=\"100\"\n        >\n          Show off your skills, teamwork, and strategy to win exciting cash prizes!\n          Register your squad now for the ultimate battleground experience.\n        </p>\n\n        <div \n          className=\"flex flex-col sm:flex-row items-center justify-center gap-3 sm:gap-4 lg:gap-5 mb-12 sm:mb-14 lg:mb-16 px-4\"\n          data-aos=\"fade-up\"\n          data-aos-duration=\"800\"\n          data-aos-delay=\"200\"\n        >\n          <Button \n            size=\"lg\" \n            className=\"w-full sm:w-auto text-base sm:text-lg shadow-lg transition-all duration-300 btn-hover-lift btn-hover-scale px-6 sm:px-8 py-5 sm:py-6\"\n            onClick={onRegisterClick}\n            data-testid=\"button-register-now\"\n          >\n            <Users className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n            Register Your Squad\n          </Button>\n          \n          <Button \n            size=\"lg\" \n            variant=\"outline\" \n            className=\"w-full sm:w-auto text-base sm:text-lg backdrop-blur-md bg-background/30 transition-all duration-300 btn-hover-lift px-6 sm:px-8 py-5 sm:py-6\"\n            onClick={() => document.getElementById('rules')?.scrollIntoView({ behavior: 'smooth' })}\n            data-testid=\"button-view-rules\"\n          >\n            <Calendar className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n            View Rules\n          </Button>\n        </div>\n\n        {/* Info Cards - Fully Responsive */}\n        <div \n          className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 max-w-xs sm:max-w-2xl md:max-w-4xl lg:max-w-5xl mx-auto px-4\"\n          data-aos=\"fade-up\"\n          data-aos-duration=\"800\"\n          data-aos-delay=\"300\"\n        >\n          <SlotCounter gameType={gameType} maxTeams={maxTeams} />\n          <CountdownTimer />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5328},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { randomBytes } from \"crypto\";\n\nlet JWT_SECRET: string;\n\nif (process.env.SESSION_SECRET) {\n  JWT_SECRET = process.env.SESSION_SECRET;\n} else if (process.env.NODE_ENV === \"production\") {\n  throw new Error(\"SESSION_SECRET environment variable must be set for production\");\n} else {\n  JWT_SECRET = randomBytes(32).toString('hex');\n  console.warn(\"⚠️  Generated temporary JWT secret for development. Set SESSION_SECRET in production!\");\n}\n\nexport interface JWTPayload {\n  id: number;\n  username: string;\n}\n\nexport function signToken(payload: JWTPayload): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"7d\" });\n}\n\nexport function verifyToken(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function getTokenFromRequest(req: Request): string | null {\n  const cookieHeader = req.headers.cookie;\n  if (!cookieHeader) return null;\n\n  const cookies = cookieHeader.split(\";\").reduce((acc, cookie) => {\n    const trimmed = cookie.trim();\n    const eqIndex = trimmed.indexOf(\"=\");\n    if (eqIndex === -1) return acc;\n    const key = trimmed.substring(0, eqIndex);\n    const value = trimmed.substring(eqIndex + 1);\n    acc[key] = value;\n    return acc;\n  }, {} as Record<string, string>);\n\n  return cookies.token || null;\n}\n\nexport function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const token = getTokenFromRequest(req);\n\n  if (!token) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const payload = verifyToken(token);\n  if (!payload) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n\n  (req as any).admin = payload;\n  next();\n}\n\nexport function setTokenCookie(res: Response, token: string) {\n  const isProduction = process.env.NODE_ENV === \"production\";\n  const cookieOptions = [\n    `token=${token}`,\n    `HttpOnly`,\n    `Path=/`,\n    `Max-Age=${7 * 24 * 60 * 60}`,\n    `SameSite=Strict`,\n    isProduction ? `Secure` : \"\",\n  ]\n    .filter(Boolean)\n    .join(\"; \");\n\n  res.setHeader(\"Set-Cookie\", cookieOptions);\n}\n\nexport function clearTokenCookie(res: Response) {\n  const isProduction = process.env.NODE_ENV === \"production\";\n  const cookieOptions = [\n    `token=`,\n    `HttpOnly`,\n    `Path=/`,\n    `Max-Age=0`,\n    `SameSite=Strict`,\n    isProduction ? `Secure` : \"\",\n  ]\n    .filter(Boolean)\n    .join(\"; \");\n\n  res.setHeader(\"Set-Cookie\", cookieOptions);\n}\n","size_bytes":2539},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Shield, Loader2 } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      return await apiRequest(\"POST\", \"/api/admin/login\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to admin panel\",\n      });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-background via-background to-accent/10\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center mb-2\">\n            <Shield className=\"w-6 h-6 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Login</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Enter your username\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Logging in...\n                  </>\n                ) : (\n                  \"Login\"\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4294},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/services/pusher.ts":{"content":"import Pusher from \"pusher\";\n\nconst isPusherEnabled = !!(\n  process.env.PUSHER_APP_ID &&\n  process.env.PUSHER_KEY &&\n  process.env.PUSHER_SECRET\n);\n\nexport const pusher = isPusherEnabled\n  ? new Pusher({\n      appId: process.env.PUSHER_APP_ID!,\n      key: process.env.PUSHER_KEY!,\n      secret: process.env.PUSHER_SECRET!,\n      cluster: process.env.PUSHER_CLUSTER || \"ap2\",\n      useTLS: true,\n    })\n  : null;\n\n// Trigger event when team registers\nexport async function notifyTeamRegistration(gameType: string) {\n  if (!pusher) {\n    console.warn(\"Pusher not configured, skipping real-time notification\");\n    return;\n  }\n  await pusher.trigger(\"tournament\", \"team-registered\", {\n    gameType,\n    timestamp: new Date().toISOString(),\n  });\n}\n\n// Trigger event when payment is updated\nexport async function notifyPaymentUpdate(teamId: string) {\n  if (!pusher) {\n    console.warn(\"Pusher not configured, skipping real-time notification\");\n    return;\n  }\n  await pusher.trigger(\"tournament\", \"payment-updated\", {\n    teamId,\n    timestamp: new Date().toISOString(),\n  });\n}\n","size_bytes":1075},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/tournament/game-registration-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { X, Upload, Loader2, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertTeamSchema, type InsertTeam } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { compressImage } from \"@/lib/imageCompression\";\nimport paymentQr from \"@assets/pubg qr_1760564389416.jpg\";\n\ninterface GameRegistrationFormProps {\n  onClose: () => void;\n  gameType: \"pubg\" | \"freefire\";\n  gameName: string;\n  entryFee: number;\n}\n\n// Loading Skeleton Component\nfunction FormSkeleton() {\n  return (\n    <div className=\"space-y-6 sm:space-y-8\">\n      <div className=\"space-y-3 sm:space-y-4\">\n        <Skeleton className=\"h-5 w-32 sm:w-40\" />\n        <Skeleton className=\"h-11 sm:h-12 w-full\" />\n      </div>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4\">\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-5 w-28 sm:w-36\" />\n          <Skeleton className=\"h-11 sm:h-12 w-full\" />\n        </div>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-5 w-28 sm:w-36\" />\n          <Skeleton className=\"h-11 sm:h-12 w-full\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function GameRegistrationForm({ onClose, gameType, gameName, entryFee }: GameRegistrationFormProps) {\n  const { toast } = useToast();\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<InsertTeam>({\n    resolver: zodResolver(insertTeamSchema),\n    defaultValues: {\n      gameType,\n      teamName: \"\",\n      leaderName: \"\",\n      leaderWhatsapp: \"\",\n      leaderPlayerId: \"\",\n      player2Name: \"\",\n      player2PlayerId: \"\",\n      player3Name: \"\",\n      player3PlayerId: \"\",\n      player4Name: \"\",\n      player4PlayerId: \"\",\n      youtubeVote: \"no\",\n      transactionId: \"\",\n      paymentScreenshot: \"\",\n      agreedToTerms: 0,\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: InsertTeam) => {\n      return await apiRequest(\"POST\", \"/api/teams\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/teams'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/teams/count'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/teams/count/${gameType}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/stats'] });\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Your team has been registered. Check WhatsApp for updates.\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File Too Large\",\n          description: \"Please select an image smaller than 10MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setIsLoading(true);\n      try {\n        const compressed = await compressImage(file, 0.3);\n        setImagePreview(compressed);\n        form.setValue(\"paymentScreenshot\", compressed);\n      } catch (error) {\n        toast({\n          title: \"Image Processing Failed\",\n          description: \"Could not process the image. Please try another file.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const onSubmit = (data: InsertTeam) => {\n    registerMutation.mutate(data);\n  };\n\n  const playerIdLabel = gameType === \"pubg\" ? \"PUBG ID\" : \"Free Fire UID\";\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-start sm:items-center justify-center p-0 sm:p-4 md:p-6 bg-background/80 backdrop-blur-sm animate-in fade-in duration-200\">\n      <Card \n        className=\"w-full h-full sm:h-auto sm:max-w-2xl md:max-w-3xl lg:max-w-4xl xl:max-w-5xl 2xl:max-w-6xl max-h-screen sm:max-h-[95vh] md:max-h-[90vh] overflow-y-auto relative rounded-none sm:rounded-lg border-0 sm:border shadow-none sm:shadow-lg\"\n      >\n        {/* Sticky Header */}\n        <div className=\"sticky top-0 z-10 bg-card/95 backdrop-blur-sm border-b p-4 sm:p-5 md:p-6 flex items-center justify-between\">\n          <div className=\"flex-1 pr-4\">\n            <h2 \n              className=\"text-lg sm:text-xl md:text-2xl lg:text-3xl font-display font-bold leading-tight\" \n              data-testid=\"text-form-title\"\n            >\n              {gameName} Registration\n            </h2>\n            <p className=\"text-xs sm:text-sm text-muted-foreground mt-1 sm:mt-2\">\n              Entry fee: <span className=\"font-semibold text-primary\">₹{entryFee}</span> per team\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"shrink-0 h-9 w-9 sm:h-10 sm:w-10 hover:bg-destructive/10 hover:text-destructive transition-all duration-200 hover:scale-110\"\n            data-testid=\"button-close-form\"\n          >\n            <X className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n          </Button>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"p-4 sm:p-5 md:p-6 lg:p-8 space-y-6 sm:space-y-7 md:space-y-8\">\n            {/* Team Information */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <h3 className=\"text-base sm:text-lg md:text-xl font-display font-semibold flex items-center gap-2\">\n                <span className=\"w-1 h-5 sm:h-6 bg-primary rounded-full\"></span>\n                Team Information\n              </h3>\n              \n              <FormField\n                control={form.control}\n                name=\"teamName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Team Name *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter your team name\" \n                        {...field} \n                        className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                        data-testid=\"input-team-name\" \n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4 md:gap-5\">\n                <FormField\n                  control={form.control}\n                  name=\"leaderName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Team Leader Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Full name\" \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-leader-name\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"leaderWhatsapp\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">WhatsApp Number *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"10-digit number\" \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-leader-whatsapp\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"leaderPlayerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Team Leader {playerIdLabel} *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder={`Enter ${playerIdLabel}`} \n                        {...field} \n                        className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                        data-testid=\"input-leader-player-id\" \n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Player 2 */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <h3 className=\"text-base sm:text-lg md:text-xl font-display font-semibold flex items-center gap-2\">\n                <span className=\"w-1 h-5 sm:h-6 bg-primary rounded-full\"></span>\n                Player 2\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4 md:gap-5\">\n                <FormField\n                  control={form.control}\n                  name=\"player2Name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 2 Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Full name\" \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player2-name\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"player2PlayerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 2 {playerIdLabel} *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder={`Enter ${playerIdLabel}`} \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player2-player-id\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Player 3 */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <h3 className=\"text-base sm:text-lg md:text-xl font-display font-semibold flex items-center gap-2\">\n                <span className=\"w-1 h-5 sm:h-6 bg-primary rounded-full\"></span>\n                Player 3\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4 md:gap-5\">\n                <FormField\n                  control={form.control}\n                  name=\"player3Name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 3 Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Full name\" \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player3-name\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"player3PlayerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 3 {playerIdLabel} *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder={`Enter ${playerIdLabel}`} \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player3-player-id\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Player 4 */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <h3 className=\"text-base sm:text-lg md:text-xl font-display font-semibold flex items-center gap-2\">\n                <span className=\"w-1 h-5 sm:h-6 bg-primary rounded-full\"></span>\n                Player 4\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4 md:gap-5\">\n                <FormField\n                  control={form.control}\n                  name=\"player4Name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 4 Name *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Full name\" \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player4-name\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"player4PlayerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm sm:text-base\">Player 4 {playerIdLabel} *</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder={`Enter ${playerIdLabel}`} \n                          {...field} \n                          className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\" \n                          data-testid=\"input-player4-player-id\" \n                        />\n                      </FormControl>\n                      <FormMessage className=\"text-xs sm:text-sm\" />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* YouTube Live Stream Vote */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <FormField\n                control={form.control}\n                name=\"youtubeVote\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3 p-4 sm:p-5 md:p-6 bg-secondary/20 rounded-lg border transition-all duration-200 hover:shadow-md\">\n                    <FormLabel className=\"text-sm sm:text-base md:text-lg font-semibold\">\n                      Do you want to watch the match live on YouTube?\n                    </FormLabel>\n                    <FormDescription className=\"text-xs sm:text-sm\">\n                      Vote for live streaming. The option with more votes will be implemented.\n                    </FormDescription>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 pt-2\"\n                      >\n                        <div className=\"flex items-center space-x-2 sm:space-x-3 p-3 sm:p-4 border rounded-lg hover:bg-secondary/30 transition-all duration-200 cursor-pointer flex-1\">\n                          <RadioGroupItem value=\"yes\" id=\"vote-yes\" className=\"h-5 w-5 sm:h-6 sm:w-6\" data-testid=\"radio-youtube-yes\" />\n                          <label htmlFor=\"vote-yes\" className=\"cursor-pointer text-sm sm:text-base font-medium flex-1\">Yes, I'd love to watch!</label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 sm:space-x-3 p-3 sm:p-4 border rounded-lg hover:bg-secondary/30 transition-all duration-200 cursor-pointer flex-1\">\n                          <RadioGroupItem value=\"no\" id=\"vote-no\" className=\"h-5 w-5 sm:h-6 sm:w-6\" data-testid=\"radio-youtube-no\" />\n                          <label htmlFor=\"vote-no\" className=\"cursor-pointer text-sm sm:text-base font-medium flex-1\">No, thanks</label>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Payment Section */}\n            <div className=\"space-y-4 sm:space-y-5\">\n              <h3 className=\"text-base sm:text-lg md:text-xl font-display font-semibold flex items-center gap-2\">\n                <span className=\"w-1 h-5 sm:h-6 bg-primary rounded-full\"></span>\n                Payment Information\n              </h3>\n              \n              <div className=\"bg-gradient-to-br from-secondary/30 to-secondary/10 p-4 sm:p-5 md:p-6 lg:p-8 rounded-lg border-2 border-dashed border-primary/20 space-y-4 sm:space-y-5\">\n                <div className=\"text-center\">\n                  <p className=\"text-xs sm:text-sm md:text-base text-muted-foreground mb-3 sm:mb-4\">\n                    Scan the QR code below to make payment\n                  </p>\n                  <div className=\"inline-block p-3 sm:p-4 md:p-5 bg-white dark:bg-white rounded-lg shadow-lg transition-transform duration-300 hover:scale-105\">\n                    <img\n                      src={paymentQr}\n                      alt=\"Payment QR Code\"\n                      className=\"w-40 h-40 sm:w-48 sm:h-48 md:w-56 md:h-56 lg:w-64 lg:h-64 object-contain mx-auto\"\n                      data-testid=\"img-payment-qr\"\n                    />\n                  </div>\n                  <div className=\"mt-3 sm:mt-4 p-3 sm:p-4 bg-primary/10 rounded-lg inline-block\">\n                    <p className=\"text-sm sm:text-base md:text-lg font-bold text-primary\">\n                      Entry Fee: ₹{entryFee}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"transactionId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Transaction ID / UTR Number *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter transaction ID from payment app\"\n                        {...field}\n                        className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base transition-all duration-200 focus:scale-[1.01] focus:shadow-md\"\n                        data-testid=\"input-transaction-id\"\n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"paymentScreenshot\"\n                render={() => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm sm:text-base\">Payment Screenshot *</FormLabel>\n                    <FormControl>\n                      <div className=\"space-y-3 sm:space-y-4\">\n                        <div className=\"relative\">\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleImageChange}\n                            className=\"h-11 sm:h-12 md:h-13 text-sm sm:text-base cursor-pointer file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-primary-foreground hover:file:bg-primary/90 transition-all duration-200\"\n                            data-testid=\"input-payment-screenshot\"\n                          />\n                          {isLoading && (\n                            <div className=\"absolute inset-0 flex items-center justify-center bg-background/80\">\n                              <Loader2 className=\"w-5 h-5 sm:w-6 sm:h-6 animate-spin text-primary\" />\n                            </div>\n                          )}\n                        </div>\n                        {imagePreview && !isLoading && (\n                          <div className=\"relative w-full max-w-md mx-auto\">\n                            <div className=\"absolute -top-2 -right-2 z-10 bg-green-500 rounded-full p-1 sm:p-1.5 shadow-lg\">\n                              <CheckCircle2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-white\" />\n                            </div>\n                            <img\n                              src={imagePreview}\n                              alt=\"Payment Screenshot Preview\"\n                              className=\"rounded-lg border-2 border-primary/20 w-full shadow-md transition-transform duration-300 hover:scale-105\"\n                            />\n                          </div>\n                        )}\n                        {isLoading && (\n                          <Skeleton className=\"h-48 sm:h-56 md:h-64 w-full max-w-md mx-auto rounded-lg\" />\n                        )}\n                      </div>\n                    </FormControl>\n                    <FormMessage className=\"text-xs sm:text-sm\" />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Terms and Conditions */}\n            <div>\n              <FormField\n                control={form.control}\n                name=\"agreedToTerms\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-lg border-2 border-primary/20 p-4 sm:p-5 md:p-6 bg-secondary/10 transition-all duration-200 hover:shadow-md hover:border-primary/40\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value === 1}\n                        onCheckedChange={(checked) => {\n                          const value = checked === true ? 1 : 0;\n                          field.onChange(value);\n                        }}\n                        className=\"mt-1 h-5 w-5 sm:h-6 sm:w-6 transition-transform duration-200 hover:scale-110\"\n                        data-testid=\"checkbox-agree-terms\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none flex-1\">\n                      <FormLabel className=\"text-sm sm:text-base font-semibold cursor-pointer\">\n                        I agree to the terms and conditions *\n                      </FormLabel>\n                      <FormDescription className=\"text-xs sm:text-sm pt-1 sm:pt-2\">\n                        Registration is final. No refunds under any circumstances. By checking this box, you confirm all information provided is accurate.\n                      </FormDescription>\n                      <FormMessage className=\"text-xs sm:text-sm pt-1\" />\n                    </div>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Submit Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 pt-2 sm:pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={registerMutation.isPending}\n                className=\"w-full sm:w-auto sm:flex-1 md:flex-initial h-11 sm:h-12 md:h-13 text-sm sm:text-base font-semibold transition-all duration-200 hover:scale-105 hover:shadow-lg\"\n                data-testid=\"button-submit-registration\"\n              >\n                {registerMutation.isPending && <Loader2 className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2 animate-spin\" />}\n                {registerMutation.isPending ? \"Registering...\" : \"Complete Registration\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                disabled={registerMutation.isPending}\n                className=\"w-full sm:w-auto h-11 sm:h-12 md:h-13 text-sm sm:text-base font-semibold transition-all duration-200 hover:scale-105 hover:shadow-lg\"\n                data-testid=\"button-cancel-registration\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":26523},"VERCEL_DEPLOYMENT.md":{"content":"# Complete Vercel Deployment Guide\n\n## Important: Your Database is Already Set Up! ✅\n\nYour tournament platform already uses **Neon PostgreSQL** - a cloud database that works perfectly with both Replit and Vercel. All your data is stored permanently in the cloud, not in local folders.\n\n## Database Information\n\n- **Database Type**: Neon PostgreSQL (Serverless)\n- **Storage**: Cloud-based (permanent, never deleted)\n- **Access**: Available via `DATABASE_URL` environment variable\n- **Multi-user**: Multiple people can access simultaneously\n- **Data Persistence**: All team registrations are saved permanently\n\n## Step 1: Get Your Database URL\n\nYour database URL is already available in Replit's environment variables. You need to copy this to Vercel.\n\n1. In Replit, open the **Secrets** tab (lock icon in left sidebar)\n2. Find and copy the value of `DATABASE_URL`\n3. It should look like: `postgresql://user:pass@ep-xxxxx.us-east-2.aws.neon.tech/neondb?sslmode=require`\n\n## Step 2: Deploy to Vercel\n\n### A. Connect Your Replit to GitHub\n\n1. In Replit, click the version control icon (Git)\n2. Click \"Create a Git Repository\"\n3. Push your code to GitHub\n\n### B. Import to Vercel\n\n1. Go to [vercel.com](https://vercel.com) and sign in with GitHub\n2. Click **\"New Project\"**\n3. Select your GitHub repository\n4. Configure project:\n   - **Framework Preset**: Vite\n   - **Build Command**: `npm run build`\n   - **Output Directory**: `dist`\n   - **Install Command**: `npm install`\n\n### C. Add Environment Variables\n\nBefore deploying, add these environment variables in Vercel:\n\n1. Click **\"Environment Variables\"** section\n2. Add the following:\n\n```\nDATABASE_URL = [paste your Neon database URL here]\nNODE_ENV = production\n```\n\n**IMPORTANT**: Make sure to paste the EXACT same `DATABASE_URL` from Replit. This ensures both Replit and Vercel use the same database.\n\n### D. Deploy\n\n1. Click **\"Deploy\"**\n2. Wait 2-3 minutes for deployment\n3. Your site will be live at: `https://your-project.vercel.app`\n\n## Step 3: Automatic Database Setup ✅\n\n**Great News**: Your database tables and admin user are created **automatically** on first deployment!\n\nWhen your application starts on Vercel, it will:\n1. ✅ Connect to the Neon database using `DATABASE_URL`\n2. ✅ Create all necessary tables (`admin_users`, `teams`)\n3. ✅ Create a default admin account\n4. ✅ Be ready to accept team registrations immediately\n\n**No manual migration needed!** Everything happens automatically.\n\n### Default Admin Credentials\n\nAfter first deployment, you can immediately login with:\n- **Username**: `admin`\n- **Password**: `admin123`\n\n**IMPORTANT**: Change this password immediately after first login for security.\n\n## Troubleshooting\n\n### Issue: \"Database connection failed\"\n**Solution**: Make sure `DATABASE_URL` in Vercel exactly matches the one from Replit (including `?sslmode=require`)\n\n### Issue: \"Teams not showing in admin panel\"\n**Solution**: \n1. Check that `DATABASE_URL` is set correctly in Vercel\n2. Check deployment logs - tables are created automatically on startup\n3. Verify database connection in deployment logs\n4. Try redeploying if tables weren't created\n\n### Issue: \"Build failed\"\n**Solution**: \n1. Make sure all dependencies are in `package.json`\n2. Check build logs in Vercel dashboard\n3. Ensure Node.js version is compatible (use 18.x or 20.x)\n\n### Issue: \"CORS errors\"\n**Solution**: Your Vite config already handles this correctly. No changes needed.\n\n## Database Management\n\n### View Data\n- Use Neon Console: https://console.neon.tech\n- Or use a database client with your `DATABASE_URL`\n\n### Backup Data\nNeon automatically backs up your data. You can also export teams via the admin panel's Excel export feature.\n\n### Reset Database\n**WARNING**: This deletes all data!\n\nIf you need to manually run migrations:\n```bash\nDATABASE_URL=\"your-url\" npm run db:push\n```\n\nOr force push schema changes:\n```bash\nDATABASE_URL=\"your-url\" npx drizzle-kit push --force\n```\n\n## How Data Persistence Works\n\n1. **Registration Flow**:\n   - User fills form → Data sent to backend → Saved to Neon database\n   - Database is in the cloud (not in Replit or Vercel servers)\n   - Data persists even if Replit/Vercel restarts\n\n2. **Multi-User Access**:\n   - Both Replit and Vercel connect to same database\n   - Users on either platform see the same data\n   - Real-time synchronization\n\n3. **Excel Exports**:\n   - Exports are generated on-demand from database\n   - Not stored permanently, just downloaded\n   - Source of truth is always the database\n\n## Admin Login Credentials\n\nDefault credentials (change these after first login):\n- **Username**: `admin`\n- **Password**: `admin123`\n\nTo create additional admins, use:\n```bash\nnpx tsx scripts/create-admin.ts\n```\n\n## Production Checklist\n\nBefore going live:\n- ✅ Database URL set in Vercel environment variables\n- ✅ First deployment completed successfully\n- ✅ Tables created automatically (check deployment logs)\n- ✅ Admin user created automatically (username: admin, password: admin123)\n- ✅ Test team registration works\n- ✅ Test admin panel - can see teams and approve/reject buttons\n- ✅ Change default admin password immediately\n- ✅ Test Excel export works\n\n## Need Help?\n\nCommon commands:\n```bash\n# Check database\nDATABASE_URL=\"your-url\" npx drizzle-kit studio\n\n# Push schema changes\nnpm run db:push\n\n# Create admin\nnpx tsx scripts/create-admin.ts\n```\n\nYour data is safe and permanent in Neon PostgreSQL! ✅\n","size_bytes":5449},"VERCEL_DEPLOY_SIMPLE.md":{"content":"# 🚀 Vercel Deployment Guide (Simple)\n\n## ✅ Aapka App Already Ready Hai!\n\nGood news! Aapka app already Vercel ke liye ready hai:\n- ✅ JWT authentication setup hai\n- ✅ PostgreSQL database support hai\n- ✅ api/index.ts already configured hai\n- ✅ vercel.json already hai\n\n## 📝 Quick Deployment Steps\n\n### Step 1: Vercel Par Deploy Karein\n\n1. **Vercel account banayein**: https://vercel.com (GitHub se signup karein)\n\n2. **Project import karein**:\n   - Vercel dashboard mein \"New Project\" click karein\n   - Apna GitHub repository select karein\n   - Vercel automatically settings detect kar lega\n\n3. **Deploy button click karein**\n\n### Step 2: Environment Variables Add Karein\n\nVercel Dashboard → Settings → Environment Variables mein ye add karein:\n\n#### Database (Required)\n```\nDATABASE_URL=your-neon-postgres-url\n```\n\n**Database URL kaise milega?**\n1. Free database ke liye: https://neon.tech par jaye\n2. Sign up karein\n3. New project banayein\n4. Connection string copy karein (starts with `postgresql://`)\n\n#### Session Secret (Required)\n```\nSESSION_SECRET=your-random-secret-here-minimum-32-characters-long\n```\n\n**Kaise generate karein?**\nBrowser console mein paste karein:\n```javascript\ncrypto.randomUUID() + crypto.randomUUID()\n```\n\n#### Other Optional (Pusher ke liye - agar real-time chahiye)\n```\nPUSHER_APP_ID=your-pusher-app-id\nPUSHER_KEY=your-pusher-key\nPUSHER_SECRET=your-pusher-secret  \nPUSHER_CLUSTER=ap2\nVITE_PUSHER_KEY=your-pusher-key\nVITE_PUSHER_CLUSTER=ap2\n```\n\n### Step 3: Redeploy\n\nEnvironment variables add karne ke baad:\n1. Deployments tab mein jaye\n2. Latest deployment ke \"...\" menu click karein\n3. \"Redeploy\" select karein\n\n## 🎉 Done!\n\nAapka tournament website ab live hai!\n\n### Testing Checklist\n\n✅ Homepage load ho raha hai  \n✅ Registration form kaam kar raha hai  \n✅ Admin login kaam kar raha hai  \n✅ Teams list show ho rahi hai  \n✅ Excel export kaam kar raha hai  \n\n## 🐛 Common Issues\n\n### Error: \"DATABASE_URL not found\"\n**Fix**: Vercel dashboard mein DATABASE_URL environment variable add karein aur redeploy karein\n\n### Error: \"Build failed\"\n**Fix**: GitHub par latest code push hai ya nahi check karein\n\n### Error: \"500 Internal Server Error\"\n**Fix**: Vercel dashboard → Deployments → Latest → \"View Function Logs\" mein error dekhen\n\n## 💡 Pro Tips\n\n1. **Free Database**: Neon.tech free tier 0.5GB storage deta hai - testing ke liye enough hai\n\n2. **Custom Domain**: Vercel par free domain milta hai (.vercel.app) ya apna custom domain connect kar sakte ho\n\n3. **Automatic Deploys**: Har baar jab GitHub par push karoge, Vercel automatically deploy karega\n\n## 🆘 Help Chahiye?\n\n1. Vercel logs dekhen: Dashboard → Deployments → Your deployment → \"View Function Logs\"\n2. Browser console dekhen: F12 press karein\n3. Database connection test karein\n\n---\n\n**Total Cost**: ₹0 (Free tier use karte hue)  \n**Setup Time**: 10-15 minutes  \n**Difficulty**: Easy ⭐⭐☆☆☆\n","size_bytes":2947},"VERCEL_SETUP.md":{"content":"# Vercel Deployment Guide\n\n## Step 1: Prepare Your Database\n\nVercel pe deployment ke liye aapko **Neon PostgreSQL** database chahiye (free tier available).\n\n1. **Neon Account Setup**:\n   - Visit: https://neon.tech\n   - Sign up for free account\n   - Create a new project\n   - Copy the DATABASE_URL (it will look like: `postgresql://...@...neon.tech/...`)\n\n## Step 2: Get Pusher Credentials\n\nReal-time sync ke liye Pusher required hai:\n\n1. **Pusher Setup**:\n   - Visit: https://pusher.com\n   - Sign up (100 connections free)\n   - Create new Channels app\n   - Note down:\n     - app_id\n     - key\n     - secret\n     - cluster (usually \"ap2\" for Asia)\n\n## Step 3: Deploy to Vercel\n\n1. **Connect Repository**:\n   - Visit: https://vercel.com\n   - Click \"Add New\" → \"Project\"\n   - Import your GitHub/GitLab repository\n\n2. **Environment Variables**:\n   Add these in Vercel Dashboard → Settings → Environment Variables:\n\n   ```\n   DATABASE_URL=your_neon_database_url_here\n   SESSION_SECRET=any_random_long_string_here\n   PUSHER_APP_ID=your_pusher_app_id\n   PUSHER_KEY=your_pusher_key\n   PUSHER_SECRET=your_pusher_secret\n   PUSHER_CLUSTER=ap2\n   VITE_PUSHER_KEY=your_pusher_key (same as PUSHER_KEY)\n   VITE_PUSHER_CLUSTER=ap2 (same as PUSHER_CLUSTER)\n   NODE_ENV=production\n   ```\n\n3. **Build Settings**:\n   - Framework Preset: Other\n   - Build Command: `npm run build`\n   - Output Directory: `dist/public`\n   - Install Command: `npm install`\n\n4. **Deploy**:\n   - Click \"Deploy\"\n   - Wait for deployment to complete\n   - Your app will be live at `your-project.vercel.app`\n\n## Step 4: Verify Deployment\n\n1. Check that the home page loads\n2. Try registering a team\n3. Check admin panel login (username: admin, password: admin123)\n4. Verify real-time updates are working\n\n## Troubleshooting\n\n### Issue: \"DATABASE_URL not found\"\n**Solution**: Make sure DATABASE_URL is added in Vercel environment variables\n\n### Issue: \"Real-time sync not working\"\n**Solution**: Check that all Pusher credentials are correct and match on both PUSHER_* and VITE_PUSHER_* variables\n\n### Issue: \"500 Internal Server Error\"\n**Solution**: \n- Check Vercel function logs\n- Verify database connection\n- Make sure all environment variables are set\n\n### Issue: \"Build failed\"\n**Solution**:\n- Check build logs in Vercel\n- Make sure package.json has correct scripts\n- Verify all dependencies are in package.json\n\n## Important Notes\n\n1. **Database Migration**: On first deployment, database tables will be created automatically\n2. **Admin Account**: Default admin (username: admin, password: admin123) will be created\n3. **Real-time Sync**: All users will see updates instantly through Pusher\n4. **Custom Domain**: You can add custom domain in Vercel settings\n\n## Support\n\nIf you face any issues:\n1. Check Vercel function logs\n2. Check browser console for errors\n3. Verify all environment variables are set correctly\n","size_bytes":2878},"VERCEL_DEPLOYMENT_COMPLETE_GUIDE.md":{"content":"# Complete Vercel Deployment Guide\n\n## 🚨 CRITICAL: Fix All Issues Before Deployment\n\nThis guide addresses all the common deployment problems:\n1. ✅ Page refresh causing 404 errors (FIXED with new vercel.json)\n2. ✅ Data not syncing between users (FIXED with cloud database setup)\n3. ✅ Environment variables setup\n4. ✅ Session management\n\n---\n\n## Prerequisites\n\nBefore deploying to Vercel, you MUST have:\n\n### 1. GitHub Repository\n```bash\n# Initialize git if not already done\ngit init\n\n# Add all files\ngit add .\n\n# Commit\ngit commit -m \"Ready for Vercel deployment\"\n\n# Create a GitHub repository and push\ngit remote add origin <your-github-repo-url>\ngit push -u origin main\n```\n\n### 2. Neon PostgreSQL Database (REQUIRED)\n\n**Why you need this:** The local PostgreSQL in Replit will NOT work on Vercel. You MUST use a cloud database for data to persist and sync across all users.\n\n#### Option A: Create New Neon Database (Recommended)\n1. Go to https://neon.tech\n2. Sign up for a free account\n3. Create a new project\n4. Copy the connection string (it will look like: `postgresql://username:password@ep-...neon.tech/neondb?sslmode=require`)\n\n#### Option B: Use Existing Replit Database\nIf you already have a Neon database in Replit:\n1. Get the DATABASE_URL from Replit Secrets\n2. Use that same URL in Vercel\n\n---\n\n## Step-by-Step Deployment Instructions\n\n### Step 1: Import Project to Vercel\n\n1. Go to https://vercel.com\n2. Click \"Add New\" → \"Project\"\n3. Import your GitHub repository\n4. Vercel will auto-detect the configuration from `vercel.json`\n\n### Step 2: Configure Environment Variables (CRITICAL)\n\nGo to **Project Settings → Environment Variables** and add the following:\n\n#### Required Environment Variables\n\n1. **DATABASE_URL** (MOST IMPORTANT)\n   - **Value**: Your Neon PostgreSQL connection string\n   - **Example**: `postgresql://user:pass@ep-cool-name-123456.us-east-1.aws.neon.tech/neondb?sslmode=require`\n   - **Why**: This ensures all users see the same data in real-time\n   - **Applies to**: Production, Preview, Development\n\n2. **SESSION_SECRET**\n   - **Value**: A random secure string (at least 32 characters)\n   - **Generate with**: `openssl rand -base64 32` or use https://randomkeygen.com/\n   - **Example**: `abc123XYZ789randomSecureString456DEF`\n   - **Why**: Required for admin login sessions\n   - **Applies to**: Production, Preview, Development\n\n3. **NODE_ENV**\n   - **Value**: `production`\n   - **Why**: Tells the app it's running in production mode\n   - **Applies to**: Production\n\n#### Screenshot: How to Add Environment Variables\n\n1. Project Settings → Environment Variables\n2. Add each variable with:\n   - **Key**: Variable name (e.g., DATABASE_URL)\n   - **Value**: The actual value\n   - **Environments**: Select all (Production, Preview, Development)\n3. Click \"Save\"\n\n### Step 3: Deploy\n\n1. Click \"Deploy\"\n2. Wait for the build to complete (usually 2-3 minutes)\n3. Your app will be live at `https://your-app-name.vercel.app`\n\n---\n\n## Post-Deployment Checklist\n\nAfter deployment, verify these things work:\n\n### ✅ Routing Test\n- [ ] Navigate to homepage\n- [ ] Click on PUBG page\n- [ ] **Refresh the page** (Should NOT show 404)\n- [ ] Click on Free Fire page\n- [ ] **Refresh the page** (Should NOT show 404)\n- [ ] Go to `/admin/login`\n- [ ] **Refresh the page** (Should NOT show 404)\n\n### ✅ Database Test\n- [ ] Register a test team on PUBG page\n- [ ] Open the site in an incognito window\n- [ ] Check if the team shows up (data sync test)\n- [ ] Register another team\n- [ ] Verify both teams appear in the registered teams list\n\n### ✅ Admin Panel Test\n- [ ] Go to `/admin/login`\n- [ ] Login with default credentials: `admin` / `admin123`\n- [ ] Verify dashboard loads with correct stats\n- [ ] Change admin password immediately\n- [ ] Test approve/reject functionality\n\n### ✅ Real-Time Sync Test\n- [ ] Open the site in 2 different browsers\n- [ ] Register a team in browser 1\n- [ ] Wait 5 seconds\n- [ ] Verify the team counter updates in browser 2\n\n---\n\n## Common Issues and Solutions\n\n### Issue 1: Page shows 404 on refresh\n**Cause**: Old vercel.json with incorrect routing\n**Solution**: Already fixed with new vercel.json using rewrites\n\n### Issue 2: Data not showing/Different users see different data\n**Cause**: DATABASE_URL not set in Vercel\n**Solution**: \n1. Check Project Settings → Environment Variables\n2. Make sure DATABASE_URL is set correctly\n3. Redeploy if you just added it\n\n### Issue 3: Admin login not working\n**Cause**: SESSION_SECRET not set\n**Solution**:\n1. Add SESSION_SECRET to environment variables\n2. Generate a strong random string\n3. Redeploy\n\n### Issue 4: Build fails with \"DATABASE_URL must be set\"\n**Cause**: DATABASE_URL not added to environment variables\n**Solution**: Add it in Vercel dashboard before deploying\n\n### Issue 5: Teams registered on Replit don't show on Vercel\n**Cause**: Using different databases (Replit uses local, Vercel uses cloud)\n**Solution**: This is expected. For production, use only the Vercel deployed version\n\n---\n\n## Database Migration\n\nIf you have existing data from Replit that you want to move to Vercel:\n\n### Option 1: Export and Import (Recommended)\n1. In Replit, use the admin dashboard to export all teams to Excel\n2. Manually register the teams on the Vercel deployed site\n3. Or write a script to bulk import (contact developer)\n\n### Option 2: Use Same Database\n1. Get the DATABASE_URL from your Replit database\n2. Set that same DATABASE_URL in Vercel\n3. Both will use the same cloud database\n\n---\n\n## Security Best Practices\n\n### 1. Change Default Admin Password\nThe default admin credentials are:\n- Username: `admin`\n- Password: `admin123`\n\n**IMPORTANT**: Change this immediately after first login!\n\n### 2. Use Strong SESSION_SECRET\nGenerate a new random SESSION_SECRET for each deployment:\n```bash\nopenssl rand -base64 32\n```\n\n### 3. Never Commit Secrets\n- ❌ Don't add DATABASE_URL to `.env` file in git\n- ❌ Don't commit `.env` file\n- ✅ Use environment variables in Vercel dashboard\n- ✅ Keep secrets in Vercel only\n\n---\n\n## Monitoring and Maintenance\n\n### Check Logs\n1. Go to Vercel Dashboard → Your Project\n2. Click \"Deployments\"\n3. Click on the latest deployment\n4. View \"Function Logs\" to see server errors\n\n### Database Monitoring\n1. Go to Neon dashboard\n2. Check database size and usage\n3. Free tier has limits, upgrade if needed\n\n### Performance\n- First load might be slow (cold start on free tier)\n- Subsequent loads are fast\n- Consider upgrading to paid plan for better performance\n\n---\n\n## Troubleshooting Deployment Errors\n\n### Build Error: \"Module not found\"\n**Solution**: Make sure all dependencies are in package.json\n```bash\nnpm install --save-dev @vercel/node\n```\n\n### Runtime Error: \"Cannot read property of undefined\"\n**Solution**: Check environment variables are set correctly\n\n### Database Connection Error\n**Solution**: \n1. Verify DATABASE_URL format\n2. Make sure it includes `?sslmode=require`\n3. Test the connection string locally\n\n---\n\n## Support and Help\n\nIf you encounter issues not covered here:\n\n1. Check Vercel deployment logs\n2. Check browser console for errors\n3. Verify all environment variables are set\n4. Try redeploying\n5. Check Neon database is accessible\n\n---\n\n## Summary Checklist\n\nBefore going live:\n\n- [ ] GitHub repository created and pushed\n- [ ] Neon PostgreSQL database created\n- [ ] DATABASE_URL added to Vercel environment variables\n- [ ] SESSION_SECRET generated and added\n- [ ] Project deployed successfully\n- [ ] All routing tests passed\n- [ ] Database sync works across browsers\n- [ ] Admin panel accessible and working\n- [ ] Default admin password changed\n- [ ] Test team registration works\n- [ ] Data persists across page refreshes\n\n---\n\n**Last Updated**: October 20, 2025\n\n**Status**: ✅ All critical issues fixed and documented\n","size_bytes":7805}},"version":2}